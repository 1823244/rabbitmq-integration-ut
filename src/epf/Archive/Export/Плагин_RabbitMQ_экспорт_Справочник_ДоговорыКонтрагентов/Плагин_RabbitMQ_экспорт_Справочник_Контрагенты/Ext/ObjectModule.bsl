#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Справочник_ДоговорыКонтрагентов",
		"Форма_Плагин_RabbitMQ_экспорт_Справочник_ДоговорыКонтрагентов",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


Функция ВыгрузитьОбъект(ДанныеСсылка) Экспорт
	Если ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Обк = ДанныеСсылка.ПолучитьОбъект(); 
	Иначе 
		Обк = ДанныеСсылка; 
	КонецЕсли;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "ERP");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	//	DEFINITION          
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	definition.Вставить("БанковскийСчет", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.БанковскийСчет));
	definition.Вставить("БанковскийСчетКонтрагента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.БанковскийСчетКонтрагента));
	definition.Вставить("ЗапрещаетсяПросроченнаяЗадолженность", обк.ЗапрещаетсяПросроченнаяЗадолженность);
	definition.Вставить("ВалютаВзаиморасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВалютаВзаиморасчетов));
	definition.Вставить("Номер", обк.Номер);
	definition.Вставить("Организация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Организация));
	definition.Вставить("СтатьяДвиженияДенежныхСредств", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СтатьяДвиженияДенежныхСредств));
	definition.Вставить("УчетАгентскогоНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.УчетАгентскогоНДС));
	definition.Вставить("Контрагент", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Контрагент));
	definition.Вставить("УстановленСрокОплаты", обк.УстановленСрокОплаты);
	definition.Вставить("Согласован", обк.Согласован);
	definition.Вставить("Подразделение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Подразделение));
	definition.Вставить("ОграничиватьСуммуЗадолженности", Обк.ОграничиватьСуммуЗадолженности);
	definition.Вставить("Сумма", Обк.Сумма);
	definition.Вставить("КонтактноеЛицо", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КонтактноеЛицо));
	definition.Вставить("СрокОплаты", Обк.СрокОплаты);
	definition.Вставить("ДоговорСУчастникомГОЗ", Обк.ДоговорСУчастникомГОЗ);
	definition.Вставить("ГосударственныйКонтракт", Обк.ГосударственныйКонтракт);
	definition.Вставить("ПорядокРасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПорядокРасчетов));
	definition.Вставить("ПлатежиПо275ФЗ",Обк.ПлатежиПо275ФЗ);
	definition.Вставить("УдалитьСтавкаНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.УдалитьСтавкаНДС));
	definition.Вставить("НаименованиеДляПечати", Обк.НаименованиеДляПечати);
	definition.Вставить("ИностранныйИсполнительВУтвержденномПеречнеГОЗ", Обк.ИностранныйИсполнительВУтвержденномПеречнеГОЗ);
	definition.Вставить("Статус", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Статус));
	definition.Вставить("СуммаПрибыли", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СуммаПрибыли));
	definition.Вставить("Период", Обк.ДатаОкончанияДействия);
	definition.Вставить("НаправлениеДеятельности", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.НаправлениеДеятельности));
	definition.Вставить("ТипДоговора", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ТипДоговора));
	definition.Вставить("СтавкаНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СтавкаНДС));
	definition.Вставить("ВидАгентскогоДоговора", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидАгентскогоДоговора));
	definition.Вставить("ОплатаРасходовПоТарифамСГосрегулированием", Обк.ОплатаРасходовПоТарифамСГосрегулированием);
	definition.Вставить("ДопустимаяСуммаЗадолженности", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДопустимаяСуммаЗадолженности));
	definition.Вставить("НалогообложениеНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.НалогообложениеНДС));
	definition.Вставить("Комментарий", Обк.Комментарий);
	definition.Вставить("НалогообложениеНДСОпределяетсяВДокументе", Обк.НалогообложениеНДСОпределяетсяВДокументе);
	definition.Вставить("ЗакупкаПодДеятельность", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЗакупкаПодДеятельность));
	definition.Вставить("ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение));
	definition.Вставить("ДатаНачалаДействия", Обк.ДатаНачалаДействия);
	definition.Вставить("Менеджер", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Менеджер));
	definition.Вставить("Date", Обк.Дата);
	definition.Вставить("ХозяйственнаяОперация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ХозяйственнаяОперация));
	definition.Вставить("ГруппаФинансовогоУчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГруппаФинансовогоУчета));
	definition.Вставить("ИдентификаторПлатежа", Обк.ИдентификаторПлатежа);
	definition.Вставить("ЗаданГрафикИсполнения",Обк.ЗаданГрафикИсполнения);
	definition.Вставить("ТипПлатежаФЗ275", Обк.ТипПлатежаФЗ275);
	definition.Вставить("СуммаПредоплатыДоОтгрузки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СуммаПредоплатыДоОтгрузки));
	definition.Вставить("ВариантОформленияЗакупок", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВариантОформленияЗакупок));
	definition.Вставить("УникальныйНомерВалютногоКонтроля", Обк.УникальныйНомерВалютногоКонтроля);
	definition.Вставить("ЗакупкаПодДеятельностьОпределяетсяВДокументе", Обк.ЗакупкаПодДеятельностьОпределяетсяВДокументе);
	definition.Вставить("КодРаздел7ДекларацииНДС", Обк.КодРаздел7ДекларацииНДС);
	definition.Вставить("Назначение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Назначение));
	definition.Вставить("ВыполненыОбязательстваПоДоговоруГОЗ",Обк.ВыполненыОбязательстваПоДоговоруГОЗ);
	definition.Вставить("ВариантПриемкиТоваров", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВариантПриемкиТоваров));
	definition.Вставить("ИдентификаторГосКонтракта", Обк.ИдентификаторГосКонтракта);
	definition.Вставить("СпособДоставки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СпособДоставки));
	definition.Вставить("ЗонаДоставки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЗонаДоставки));
	definition.Вставить("ВремяДоставкиС", Обк.ВремяДоставкиС);
	definition.Вставить("ВремяДоставкиПо", Обк.ВремяДоставкиПо);
	definition.Вставить("АдресДоставки", Обк.АдресДоставки);
	definition.Вставить("АдресДоставкиЗначенияПолей", Обк.АдресДоставкиЗначенияПолей);
	definition.Вставить("ДополнительнаяИнформацияПоДоставке", Обк.ДополнительнаяИнформацияПоДоставке);
	definition.Вставить("АдресДоставкиПеревозчика", Обк.АдресДоставкиПеревозчика);
	definition.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", Обк.АдресДоставкиПеревозчикаЗначенияПолей);
	definition.Вставить("АдресДоставкиДляПоставщика", Обк.АдресДоставкиДляПоставщика);
	definition.Вставить("ОплатаВВалюте", Обк.ОплатаВВалюте);
	definition.Вставить("ОбъектРасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ОбъектРасчетов));
	definition.Вставить("ЦентрализованныйДоговор", Обк.ЦентрализованныйДоговор);
	definition.Вставить("РазрешаетсяПередачаОплатМеждуФилиалами", Обк.РазрешаетсяПередачаОплатМеждуФилиалами);
	definition.Вставить("АдресДоставкиЗначение", Обк.АдресДоставкиЗначение);
	definition.Вставить("АдресДоставкиПеревозчикаЗначение", Обк.АдресДоставкиПеревозчикаЗначение);
	definition.Вставить("КомиссионныеПродажи25", Обк.КомиссионныеПродажи25);
	definition.Вставить("ВестиРасчетыЧерезКонечныхПокупателей", Обк.ВестиРасчетыЧерезКонечныхПокупателей);
	definition.Вставить("ВидЦенУчетный", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидЦенУчетный));
	definition.Вставить("ВидЦенПродажи", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидЦенПродажи));
	definition.Вставить("КомиссионерКонтрагент", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КомиссионерКонтрагент));
	definition.Вставить("ДоговорСКомиссионером", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДоговорСКомиссионером));
	definition.Вставить("ГруппаФинансовогоУчетаКлиента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГруппаФинансовогоУчетаКлиента));
	definition.Вставить("РазрешенаРаботаСДочернимиПартнерами", Обк.РазрешенаРаботаСДочернимиПартнерами);
	definition.Вставить("СтавкаДисконтирования", Обк.СтавкаДисконтирования);
	definition.Вставить("СрокДляПримененияДисконтирования", Обк.СрокДляПримененияДисконтирования);
	definition.Вставить("ВариантВыбытияМаркируемойПродукции", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВариантВыбытияМаркируемойПродукции));

	//------------------------------------------------------     ТЧ ДоговорыСЗаказчиком

	ТЧДоговорыСЗаказчиками = Новый Массив;

	Для сч = 0 По обк.ДоговорыСЗаказчиками.Количество()-1 Цикл

		стрк = обк.ДоговорыСЗаказчиками[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("Процент", стрк.Процент);
		НовСтр.Вставить("ДоговорСЗаказчиком", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ДоговорСЗаказчиком));
		ТЧДоговорыСЗаказчиками.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧДоговорыСЗаказчиками", ТЧДоговорыСЗаказчиками);

	//------------------------------------------------------     ТЧ ДополнительныеРеквизиты

	ТЧДополнительныеРеквизиты = Новый Массив;

	Для сч = 0 По обк.ДополнительныеРеквизиты.Количество()-1 Цикл

		стрк = обк.ДополнительныеРеквизиты[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("Значение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Значение));
		НовСтр.Вставить("Свойство", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Свойство));
		НовСтр.Вставить("ТекстоваяСтрока", стрк.ТекстоваяСтрока);
		ТЧДополнительныеРеквизиты.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧДополнительныеРеквизиты", ТЧДополнительныеРеквизиты);

	//------------------------------------------------------     ТЧ ПодтверждающиеДокументы

	ТЧПодтверждающиеДокументы = Новый Массив;

	Для сч = 0 По обк.ПодтверждающиеДокументы.Количество()-1 Цикл

		стрк = обк.ПодтверждающиеДокументы[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("ВидДокумента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидДокумента));
		НовСтр.Вставить("Номер", стрк.Номер);
		НовСтр.Вставить("Дата", стрк.Дата);
		НовСтр.Вставить("Сумма", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Сумма));
		ТЧПодтверждающиеДокументы.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧПодтверждающиеДокументы", ТЧПодтверждающиеДокументы);

	//------------------------------------------------------     ТЧ Филиалы

	ТЧФилиалы = Новый Массив;

	Для сч = 0 По обк.Филиалы.Количество()-1 Цикл

		стрк = обк.Филиалы[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("Организация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Организация));
		ТЧФилиалы.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧФилиалы", ТЧФилиалы);




	//------------------------------------------------------ ФИНАЛ


	СтруктураОбъекта.Вставить("definition", definition);
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	Возврат json;
КонецФункции

Функция ПолучитьОбъектыДляВыгрузки(Узел) Экспорт
	Возврат Неопределено;
КонецФункции

Функция getRoutingKey() Экспорт
	Возврат "static";
КонецФункции

