#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Документ_РеализацияТоваровУслуг",
		"Форма_Плагин_RabbitMQ_экспорт_Документ_РеализацияТоваровУслуг",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	Номенклатура	- СправочникСсылка.Номенклатура / СправочникОбъект.Номенклатура - при чтении узла обмена сюда будут приходить именно объекты
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыгрузитьОбъект(Ссылка) Экспорт
	
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Обк = Ссылка.ПолучитьОбъект(); 
	Иначе 
		Обк = Ссылка; 
	КонецЕсли;

	
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	
	СтруктураОбъекта.Вставить("source", "ERP");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	//	DEFINITION
	
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	
	//Таблица:	Шапка	
	
	
	definition.Вставить("Автор", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Автор));
	definition.Вставить("АдресДоставки", Обк.АдресДоставки);
	definition.Вставить("АдресДоставкиЗначение", Обк.АдресДоставкиЗначение);
	definition.Вставить("АдресДоставкиЗначенияПолей", Обк.АдресДоставкиЗначенияПолей);
	definition.Вставить("АдресДоставкиПеревозчика", Обк.АдресДоставкиПеревозчика);
	definition.Вставить("АдресДоставкиПеревозчикаЗначение", Обк.АдресДоставкиПеревозчикаЗначение);
	definition.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", Обк.АдресДоставкиПеревозчикаЗначенияПолей);
	definition.Вставить("БанковскийСчетГрузоотправителя", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.БанковскийСчетГрузоотправителя));
	definition.Вставить("БанковскийСчетГрузополучателя", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.БанковскийСчетГрузополучателя));
	definition.Вставить("БанковскийСчетКонтрагента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.БанковскийСчетКонтрагента));
	definition.Вставить("БанковскийСчетОрганизации", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.БанковскийСчетОрганизации));
	definition.Вставить("Валюта", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Валюта));
	definition.Вставить("ВалютаВзаиморасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВалютаВзаиморасчетов));
	definition.Вставить("ВариантВыбытияМаркируемойПродукции", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВариантВыбытияМаркируемойПродукции));
	definition.Вставить("ВариантОформленияПродажи", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВариантОформленияПродажи));
	definition.Вставить("ВернутьМногооборотнуюТару", Обк.ВернутьМногооборотнуюТару);
	definition.Вставить("ВидыЗапасовУказаныВручную", Обк.ВидыЗапасовУказаныВручную);
	definition.Вставить("ВремяДоставкиПо", XMLСтрока(Обк.ВремяДоставкиПо));
	definition.Вставить("ВремяДоставкиС", XMLСтрока(Обк.ВремяДоставкиС));
	definition.Вставить("ГлавныйБухгалтер", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГлавныйБухгалтер));
	definition.Вставить("Грузоотправитель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Грузоотправитель));
	definition.Вставить("Грузополучатель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Грузополучатель));
	definition.Вставить("ГруппаФинансовогоУчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГруппаФинансовогоУчета));
	definition.Вставить("ДатаВозвратаМногооборотнойТары", XMLСтрока(Обк.ДатаВозвратаМногооборотнойТары));
	definition.Вставить("ДатаПереходаПраваСобственности", XMLСтрока(Обк.ДатаПереходаПраваСобственности));
	definition.Вставить("ДоверенностьВыдана", Обк.ДоверенностьВыдана);
	definition.Вставить("ДоверенностьДата", XMLСтрока(Обк.ДоверенностьДата));
	definition.Вставить("ДоверенностьЛицо", Обк.ДоверенностьЛицо);
	definition.Вставить("ДоверенностьНомер", Обк.ДоверенностьНомер);
	definition.Вставить("Договор", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Договор));
	definition.Вставить("ДополнительнаяИнформацияПоДоставке", Обк.ДополнительнаяИнформацияПоДоставке);
	definition.Вставить("ДопоставкаПоРеализации", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДопоставкаПоРеализации));
	definition.Вставить("ЕстьМаркируемаяПродукцияГИСМ", Обк.ЕстьМаркируемаяПродукцияГИСМ);
	definition.Вставить("ЗаказКлиента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЗаказКлиента));
	definition.Вставить("ЗонаДоставки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЗонаДоставки));
	definition.Вставить("ИдентификаторПлатежа", Обк.ИдентификаторПлатежа);
	definition.Вставить("КартаЛояльности", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КартаЛояльности));
	definition.Вставить("Касса", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Касса));
	definition.Вставить("КлиентДоговор", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КлиентДоговор));
	definition.Вставить("КлиентКонтрагент", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КлиентКонтрагент));
	definition.Вставить("КлиентПартнер", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КлиентПартнер));
	definition.Вставить("Комментарий", Обк.Комментарий);
	definition.Вставить("КонтактноеЛицо", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КонтактноеЛицо));
	definition.Вставить("Контрагент", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Контрагент));
	definition.Вставить("КурсЗнаменатель", Обк.КурсЗнаменатель);
	definition.Вставить("КурсЧислитель", Обк.КурсЧислитель);
	definition.Вставить("Курьер", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Курьер));
	definition.Вставить("Менеджер", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Менеджер));
	definition.Вставить("НалогообложениеНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.НалогообложениеНДС));
	definition.Вставить("НаправлениеДеятельности", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.НаправлениеДеятельности));
	definition.Вставить("ОбъектРасчетовУпр", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ОбъектРасчетовУпр));
	definition.Вставить("ОплатаВВалюте", Обк.ОплатаВВалюте);
	definition.Вставить("Организация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Организация));
	definition.Вставить("Основание", Обк.Основание);
	definition.Вставить("ОснованиеДата", XMLСтрока(Обк.ОснованиеДата));
	definition.Вставить("ОснованиеНомер", Обк.ОснованиеНомер);
	definition.Вставить("ОсобыеУсловияПеревозки", Обк.ОсобыеУсловияПеревозки);
	definition.Вставить("ОсобыеУсловияПеревозкиОписание", Обк.ОсобыеУсловияПеревозкиОписание);
	definition.Вставить("Отпустил", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Отпустил));
	definition.Вставить("ОтпустилДолжность", Обк.ОтпустилДолжность);
	definition.Вставить("Партнер", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Партнер));
	definition.Вставить("ПеревозчикПартнер", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПеревозчикПартнер));
	definition.Вставить("Подразделение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Подразделение));
	definition.Вставить("ПорядокРасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПорядокРасчетов));
	definition.Вставить("РеализацияПоЗаказам", Обк.РеализацияПоЗаказам);
	definition.Вставить("Руководитель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Руководитель));
	definition.Вставить("Сборщик", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Сборщик));
	definition.Вставить("Сделка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Сделка));
	definition.Вставить("СкидкиРассчитаны", Обк.СкидкиРассчитаны);
	definition.Вставить("Склад", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Склад));
	definition.Вставить("Согласован", Обк.Согласован);
	definition.Вставить("Соглашение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Соглашение));
	definition.Вставить("СостояниеЗаполненияМногооборотнойТары", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СостояниеЗаполненияМногооборотнойТары));
	definition.Вставить("СпособДоставки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СпособДоставки));
	definition.Вставить("Статус", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Статус));
	definition.Вставить("СуммаВзаиморасчетов", Обк.СуммаВзаиморасчетов);
	definition.Вставить("СуммаВзаиморасчетовПоТаре", Обк.СуммаВзаиморасчетовПоТаре);
	definition.Вставить("СуммаДокумента", Обк.СуммаДокумента);
	definition.Вставить("ТребуетсяЗалогЗаТару", Обк.ТребуетсяЗалогЗаТару);
	definition.Вставить("ФормаОплаты", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ФормаОплаты));
	definition.Вставить("ХозяйственнаяОперация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ХозяйственнаяОперация));
	definition.Вставить("ЦенаВключаетНДС", Обк.ЦенаВключаетНДС);
	definition.Вставить("ЭтапГосконтрактаЕИС", Обк.ЭтапГосконтрактаЕИС);


	// ТЧ ТОВАРЫ
	
	ТЧТовары = Новый Массив;
	
	Для сч = 0 По обк.товары.Количество()-1 Цикл
		
		стрк = обк.товары[сч];
		
		НовСтр = Новый Структура;   
		
		НовСтр.Вставить("АналитикаУчетаНаборов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.АналитикаУчетаНаборов));
		НовСтр.Вставить("АналитикаУчетаНоменклатуры", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.АналитикаУчетаНоменклатуры));
		НовСтр.Вставить("ВидЦены", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидЦены));
		НовСтр.Вставить("ЗаказКлиента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЗаказКлиента));
		НовСтр.Вставить("ИдентификаторСтроки", стрк.ИдентификаторСтроки);
		НовСтр.Вставить("КлючСвязи", стрк.КлючСвязи);
		НовСтр.Вставить("КодСтроки", стрк.КодСтроки);
		НовСтр.Вставить("КодТНВЭД", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.КодТНВЭД));
		НовСтр.Вставить("Количество", стрк.Количество);
		НовСтр.Вставить("КоличествоУпаковок", стрк.КоличествоУпаковок);
		НовСтр.Вставить("Назначение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Назначение));
		НовСтр.Вставить("Номенклатура", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Номенклатура));
		НовСтр.Вставить("НоменклатураНабора", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.НоменклатураНабора));
		НовСтр.Вставить("НоменклатураПартнера", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.НоменклатураПартнера));
		НовСтр.Вставить("ОбъектРасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ОбъектРасчетов));
		НовСтр.Вставить("Подразделение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Подразделение));
		НовСтр.Вставить("ПроцентАвтоматическойСкидки", стрк.ПроцентАвтоматическойСкидки);
		НовСтр.Вставить("ПроцентРучнойСкидки", стрк.ПроцентРучнойСкидки);
		НовСтр.Вставить("Серия", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Серия));
		НовСтр.Вставить("Склад", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Склад));
		НовСтр.Вставить("СрокПоставки", стрк.СрокПоставки);
		НовСтр.Вставить("СтавкаНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.СтавкаНДС));
		НовСтр.Вставить("СтатусУказанияСерий", стрк.СтатусУказанияСерий);
		НовСтр.Вставить("Сумма", стрк.Сумма);
		НовСтр.Вставить("СуммаАвтоматическойСкидки", стрк.СуммаАвтоматическойСкидки);
		НовСтр.Вставить("СуммаБонусныхБалловКСписанию", стрк.СуммаБонусныхБалловКСписанию);
		НовСтр.Вставить("СуммаБонусныхБалловКСписаниюВВалюте", стрк.СуммаБонусныхБалловКСписаниюВВалюте);
		НовСтр.Вставить("СуммаВзаиморасчетов", стрк.СуммаВзаиморасчетов);
		НовСтр.Вставить("СуммаНачисленныхБонусныхБалловВВалюте", стрк.СуммаНачисленныхБонусныхБалловВВалюте);
		НовСтр.Вставить("СуммаНДС", стрк.СуммаНДС);
		НовСтр.Вставить("СуммаРучнойСкидки", стрк.СуммаРучнойСкидки);
		НовСтр.Вставить("СуммаСНДС", стрк.СуммаСНДС);
		НовСтр.Вставить("Упаковка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Упаковка));
		НовСтр.Вставить("Характеристика", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Характеристика));
		НовСтр.Вставить("ХарактеристикаНабора", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ХарактеристикаНабора));
		НовСтр.Вставить("Цена", стрк.Цена);
		
		ТЧТовары.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧТовары", ТЧТовары);

	//Таблица:	ЭтапыГрафикаОплаты	
	
	ТЧЭтапыГрафикаОплаты = Новый Массив;
	
	Для сч = 0 По обк.ЭтапыГрафикаОплаты.Количество()-1 Цикл
		
		стрк = обк.ЭтапыГрафикаОплаты[сч];
		
		НовСтр = Новый Структура;   
				
		НовСтр.Вставить("ВариантОплаты", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВариантОплаты));
		НовСтр.Вставить("ВариантОтсчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВариантОтсчета));
		НовСтр.Вставить("ДатаПлатежа", стрк.ДатаПлатежа);
		НовСтр.Вставить("Заказ", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Заказ));
		НовСтр.Вставить("ОбъектРасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ОбъектРасчетов));
		НовСтр.Вставить("ПроцентЗалогаЗаТару", стрк.ПроцентЗалогаЗаТару);
		НовСтр.Вставить("ПроцентПлатежа", стрк.ПроцентПлатежа);
		НовСтр.Вставить("СверхЗаказа", стрк.СверхЗаказа);
		НовСтр.Вставить("Сдвиг", стрк.Сдвиг);
		НовСтр.Вставить("СуммаВзаиморасчетов", стрк.СуммаВзаиморасчетов);
		НовСтр.Вставить("СуммаВзаиморасчетовПоТаре", стрк.СуммаВзаиморасчетовПоТаре);
		НовСтр.Вставить("СуммаЗалогаЗаТару", стрк.СуммаЗалогаЗаТару);
		НовСтр.Вставить("СуммаПлатежа", стрк.СуммаПлатежа);
			
		ТЧЭтапыГрафикаОплаты.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧЭтапыГрафикаОплаты", ТЧЭтапыГрафикаОплаты);

			
	//Таблица:	СкидкиНаценки	
	
	ТЧСкидкиНаценки = Новый Массив;
	
	Для сч = 0 По обк.СкидкиНаценки.Количество()-1 Цикл
		
		стрк = обк.СкидкиНаценки[сч];
		
		НовСтр = Новый Структура;   
				
		НовСтр.Вставить("КлючСвязи", стрк.КлючСвязи);
		НовСтр.Вставить("НапомнитьПозже", стрк.НапомнитьПозже);
		НовСтр.Вставить("СкидкаНаценка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.СкидкаНаценка));
		НовСтр.Вставить("Сумма", стрк.Сумма);
		
		ТЧСкидкиНаценки.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧСкидкиНаценки", ТЧСкидкиНаценки);

	
	//Таблица:	ВидыЗапасов	
	
	ТЧВидыЗапасов = Новый Массив;
	
	Для сч = 0 По обк.видыЗапасов.Количество()-1 Цикл
		
		стрк = обк.видыЗапасов[сч];
		
		НовСтр = Новый Структура;   
				
		НовСтр.Вставить("АналитикаУчетаНаборов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.АналитикаУчетаНаборов));
		НовСтр.Вставить("АналитикаУчетаНоменклатуры", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.АналитикаУчетаНоменклатуры));
		НовСтр.Вставить("ВидЗапасов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидЗапасов));
		НовСтр.Вставить("ВидЗапасовПолучателя", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидЗапасовПолучателя));
		НовСтр.Вставить("ЗаказКлиента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЗаказКлиента));
		НовСтр.Вставить("ИдентификаторСтроки", стрк.ИдентификаторСтроки);
		НовСтр.Вставить("КодТНВЭД", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.КодТНВЭД));
		НовСтр.Вставить("Количество", стрк.Количество);
		НовСтр.Вставить("КоличествоПоРНПТ", стрк.КоличествоПоРНПТ);
		НовСтр.Вставить("КоличествоУпаковок", стрк.КоличествоУпаковок);
		НовСтр.Вставить("НомерГТД", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.НомерГТД));
		НовСтр.Вставить("ОбъектРасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ОбъектРасчетов));
		НовСтр.Вставить("СтавкаНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.СтавкаНДС));
		НовСтр.Вставить("СуммаАвтоматическойСкидки", стрк.СуммаАвтоматическойСкидки);
		НовСтр.Вставить("СуммаВзаиморасчетов", стрк.СуммаВзаиморасчетов);
		НовСтр.Вставить("СуммаНДС", стрк.СуммаНДС);
		НовСтр.Вставить("СуммаРучнойСкидки", стрк.СуммаРучнойСкидки);
		НовСтр.Вставить("СуммаСНДС", стрк.СуммаСНДС);
		НовСтр.Вставить("Упаковка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Упаковка));
		НовСтр.Вставить("Цена", стрк.Цена);
		
		ТЧВидыЗапасов.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧВидыЗапасов", ТЧВидыЗапасов);

	
	
	//Таблица:	ДополнительныеРеквизиты	
	//		
	

	ТЧДополнительныеРеквизиты = Новый Массив;
	
    Для сч = 0 По обк.ДополнительныеРеквизиты.Количество()-1 Цикл
		
		стрк = обк.ДополнительныеРеквизиты[сч];
		
		СтрокаТовары = Новый Структура;

		СтрокаТовары.Вставить("Значение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Значение)); 	
		СтрокаТовары.Вставить("Свойство", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Свойство)); 	
		СтрокаТовары.Вставить("ТекстоваяСтрока", стрк.ТекстоваяСтрока); 	

		ТЧДополнительныеРеквизиты.Добавить(СтрокаТовары);
	КонецЦикла;
	
	definition.Вставить("ТЧДополнительныеРеквизиты", ТЧДополнительныеРеквизиты);


	//Таблица:	РасшифровкаПлатежа	
	
	ТЧРасшифровкаПлатежа = Новый Массив;
	
	Для сч = 0 По обк.РасшифровкаПлатежа.Количество()-1 Цикл
		
		стрк = обк.РасшифровкаПлатежа[сч];
		
		НовСтр = Новый Структура;   
				
		НовСтр.Вставить("ВалютаВзаиморасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВалютаВзаиморасчетов));
		НовСтр.Вставить("ОбъектРасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ОбъектРасчетов));
		НовСтр.Вставить("Сумма", стрк.Сумма);
		НовСтр.Вставить("СуммаВзаиморасчетов", стрк.СуммаВзаиморасчетов);
		
		ТЧРасшифровкаПлатежа.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧРасшифровкаПлатежа", ТЧРасшифровкаПлатежа);
	

	
	//Таблица:	Серии	
	
	ТЧСерии = Новый Массив;
	
	Для сч = 0 По обк.Серии.Количество()-1 Цикл
		
		стрк = обк.Серии[сч];
		
		НовСтр = Новый Структура;   
				
		НовСтр.Вставить("Количество", стрк.Количество);
		НовСтр.Вставить("Назначение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Назначение));
		НовСтр.Вставить("Номенклатура", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Номенклатура));
		НовСтр.Вставить("Серия", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Серия));
		НовСтр.Вставить("Склад", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Склад));
		НовСтр.Вставить("Характеристика", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Характеристика));
				
		ТЧСерии.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧСерии", ТЧСерии);
	
	
	
	//Таблица:	ШтрихкодыУпаковок
	
	ТЧШтрихкодыУпаковок = Новый Массив;
	
	Для сч = 0 По обк.ШтрихкодыУпаковок.Количество()-1 Цикл
		
		стрк = обк.ШтрихкодыУпаковок[сч];
		
		НовСтр = Новый Структура;   
				
		НовСтр.Вставить("ЧастичноеВыбытиеВариантУчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЧастичноеВыбытиеВариантУчета));
		НовСтр.Вставить("ЧастичноеВыбытиеКоличество", стрк.ЧастичноеВыбытиеКоличество);
		НовСтр.Вставить("ЧастичноеВыбытиеНоменклатура", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЧастичноеВыбытиеНоменклатура));
		НовСтр.Вставить("ЧастичноеВыбытиеХарактеристика", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЧастичноеВыбытиеХарактеристика));
		НовСтр.Вставить("ШтрихкодУпаковки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ШтрихкодУпаковки));
				
		ТЧШтрихкодыУпаковок.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧШтрихкодыУпаковок", ТЧШтрихкодыУпаковок);

	
	
	//Таблица:	НачислениеБонусныхБаллов
	
	ТЧНачислениеБонусныхБаллов = Новый Массив;
	
	Для сч = 0 По обк.НачислениеБонусныхБаллов.Количество()-1 Цикл
		
		стрк = обк.НачислениеБонусныхБаллов[сч];
		
		НовСтр = Новый Структура;   
				
		НовСтр.Вставить("БонуснаяПрограммаЛояльности", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.БонуснаяПрограммаЛояльности));
		НовСтр.Вставить("ДатаНачисления", стрк.ДатаНачисления);
		НовСтр.Вставить("ДатаСписания", стрк.ДатаСписания);
		НовСтр.Вставить("КлючСвязи", стрк.КлючСвязи);
		НовСтр.Вставить("СуммаБонусныхБаллов", стрк.СуммаБонусныхБаллов);
				
		ТЧНачислениеБонусныхБаллов.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧНачислениеБонусныхБаллов", ТЧНачислениеБонусныхБаллов);
	
	
	
	
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
	
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	
	Возврат json;
	
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОбъектыДляВыгрузки(Узел) Экспорт
	Возврат Неопределено;
КонецФункции

Функция getRoutingKey() Экспорт
	Возврат "doc";
КонецФункции




