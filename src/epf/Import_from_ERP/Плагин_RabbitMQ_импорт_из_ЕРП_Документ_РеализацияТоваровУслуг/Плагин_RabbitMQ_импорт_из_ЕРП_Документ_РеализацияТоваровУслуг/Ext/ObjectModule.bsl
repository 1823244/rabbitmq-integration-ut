
Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;

Перем мЛоггер;
Перем мИдВызова;

Перем мВнешняяСистема;
Перем ИмяСобытияЖР;

Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем НеНайденнаяНоменклатураМассив;

Перем СобиратьНенайденныхКонтрагентов Экспорт;
Перем НеНайденныеКонтрагентыМассив;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.21");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг",
		"Форма_Плагин_RabbitMQ_импорт_из_УТ_Документ_РеализацияТоваровУслуг",
		ТипКоманды, 
		Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
	//           ** Использование - Строка - тип команды:
	//               "ВызовКлиентскогоМетода",
	//               "ВызовСерверногоМетода",
	//               "ЗаполнениеФормы",
	//               "ОткрытиеФормы" или
	//               "СценарийВБезопасномРежиме".
	//               Для получения типов команд рекомендуется использовать функции
	//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
	//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.
	
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
	
КонецПроцедуры

#КонецОбласти


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	//мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из УТ: Реализация товаров услуг");
	
	Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			//мЛоггер.ерр("Неверный тип входящего объекта. сообщение пропущено.");
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.реализациятоваровуслуг") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		
		Рез = СоздатьОбновитьДокумент(СтруктураОбъекта);
		
		Попытка
			ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовНоменклатуры(НеНайденнаяНоменклатураМассив);
			Сообщить("Выполнен экспорт ненайденной номенклатуры - " + Строка(НеНайденнаяНоменклатураМассив.Количество()) + " позиций");
		Исключение
			т = "Ошибка экспорта ненайденной номенклатуры в УПП. Подробности: " + ОписаниеОшибки();
			Сообщить(т);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,,т);
			//мЛоггер.ерр(т);
		КонецПопытки;
		
		Попытка
			ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовКонтрагентов(НеНайденныеКонтрагентыМассив);
			Сообщить("Выполнен экспорт ненайденных контрагентов - " + Строка(НеНайденныеКонтрагентыМассив.Количество()) + " позиций");
		Исключение
			т = "Ошибка экспорта ненайденных контрагентов в УПП. Подробности: "+ОписаниеОшибки();
			Сообщить(т);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,,т);
			//мЛоггер.ерр(т);
		КонецПопытки;
		
		Возврат Рез;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,
		"Импорт из УТ. Плагин: Импорт Документ.РеализацияТоваровУслуг. Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;// для помещения в retry
		
	КонецПопытки;
КонецФункции

Функция СоздатьОбновитьДокумент(СтруктураОбъекта) Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;   
	
	ПустойДокумент = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	ДокументИзУТ = "РеализацияТоваровУслуг (УТ) № " + деф.Number + " от " + строка(деф.Date);
	
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД);
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки документа для " + ДокументИзУТ+ ". Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка
		
		Действие = ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			СсылкаНового = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		Иначе 
			ОтменитьТранзакцию();
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных);
		
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
		
		//РегистрыСведений.ксп_СоответствиеДокументовУстановкаПорядковыхНомеров.ДобавитьЗапись(ОбъектДанных.Ссылка, деф.Number, id.ref);
		
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
		ЗафиксироватьТранзакцию();
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Информация,,,"Записан Документ : "+строка(ОбъектДанных)+". Исходный док. УТ "+строка(ДокументИзУТ));
		
		Рез = ОбъектДанных.ССылка;
		
	Исключение
		
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
		"Объект не загружен! Ошибка в процессе загрузки документа " + ДокументИзУТ + ". Подробности: " + т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение; //отправляем в retry-очередь
		
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных, jsonText = "") Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.АдресДоставки = деф.АдресДоставки;
	//ОбъектДанных.АдресДоставкиЗначение = деф.АдресДоставкиЗначение;
	//ОбъектДанных.АдресДоставкиЗначенияПолей = деф.АдресДоставкиЗначенияПолей;
	ОбъектДанных.АдресДоставкиПеревозчика = деф.АдресДоставкиПеревозчика;
	//ОбъектДанных.АдресДоставкиПеревозчикаЗначение = деф.АдресДоставкиПеревозчикаЗначение;
	ОбъектДанных.АдресДоставкиПеревозчикаЗначенияПолей = деф.АдресДоставкиПеревозчикаЗначенияПолей;
	
	Если деф.БанковскийСчетОрганизации.свойство("БИК") И 
		деф.БанковскийСчетОрганизации.свойство("НомерСчета") Тогда
		ОбъектДанных.БанковскийСчетОрганизации = ксп_ИмпортСлужебный.НайтиБанковскийСчет(деф.БанковскийСчетОрганизации.НомерСчета, деф.БанковскийСчетОрганизации.БИК);
	КонецЕсли;
	
	ОбъектДанных.Валюта = Справочники.Валюты.НайтиПоКоду(деф.Валюта.currencyCode);
	ОбъектДанных.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(деф.ВалютаВзаиморасчетов.currencyCode);
	
	ОбъектДанных.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	ОбъектДанных.ВернутьМногооборотнуюТару = деф.ВернутьМногооборотнуюТару;
	ОбъектДанных.ВидыЗапасовУказаныВручную = деф.ВидыЗапасовУказаныВручную;
	
	//ОбъектДанных.ВремяДоставкиПо = деф.ВремяДоставкиПо;
	
	ОбъектДанных.ДатаВозвратаМногооборотнойТары = деф.ДатаВозвратаМногооборотнойТары;
	ОбъектДанных.ДоверенностьВыдана = деф.ДоверенностьВыдана;
	ОбъектДанных.ДоверенностьДата = деф.ДоверенностьДата;
	ОбъектДанных.ДоверенностьЛицо = деф.ДоверенностьЛицо;
	ОбъектДанных.ДоверенностьНомер = деф.ДоверенностьНомер;
	ОбъектДанных.ДополнительнаяИнформацияПоДоставке = деф.ДополнительнаяИнформацияПоДоставке;
	
	Если ТипЗнч(деф.ЗаказКлиента) = Тип("Структура") Тогда //может быть пустая строка, т.к. тип - составной
		гуид="";
		ЕстьАтрибут = деф.ЗаказКлиента.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			ОбъектДанных.ЗаказКлиента = Документы.ЗаказКлиента.ПолучитьСсылку( Новый УникальныйИдентификатор( гуид ) );
			ОбъектДанных.РеализацияПоЗаказам = Истина;
		Иначе
			ОбъектДанных.ЗаказКлиента = Неопределено;
			ОбъектДанных.РеализацияПоЗаказам = Ложь;
		КонецЕсли;
	Иначе
		ОбъектДанных.ЗаказКлиента = Неопределено;
		ОбъектДанных.РеализацияПоЗаказам = Ложь;
	КонецЕсли;
	
	ОбъектДанных.ИдентификаторПлатежа = Строка(Новый УникальныйИдентификатор);
	
	ОбъектДанных.Комментарий ="[УТ №"+деф.Number+" от "+строка(деф.Date)+"]
		|Оригинальный коммент.: "+Строка(деф.Комментарий);
	
	ТэгКонтрагента = деф.Контрагент;
	//_Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(ТэгКонтрагента, мВнешняяСистема);
	_Контрагент = ПолучитьСсылкуСправочникаПоДаннымID(ТэгКонтрагента, "Контрагенты");
	
	Если СобиратьНенайденныхКонтрагентов и ТэгКонтрагента.Свойство("ref") Тогда
		Если ТипЗнч(_Контрагент) = Тип("СправочникСсылка.Контрагенты") И НЕ ЗначениеЗаполнено(_Контрагент.ВерсияДанных) Тогда
			Если НеНайденныеКонтрагентыМассив.Найти(ТэгКонтрагента.ref) = Неопределено Тогда
				НеНайденныеКонтрагентыМассив.Добавить(ТэгКонтрагента.Ref);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектДанных.Контрагент = _Контрагент;
	
	//ОбъектДанных.Договор = ксп_ИмпортСлужебный.НайтиДоговор(деф.Договор); //по гуид
	ОбъектДанных.Договор = ПолучитьСсылкуСправочникаПоДаннымID(деф.Договор, "ДоговорыКонтрагентов");
	
	Если НЕ ЗначениеЗаполнено(ОбъектДанных.Договор) Тогда
		ОбъектДанных.Договор = НайтиДоговорРеализации(ОбъектДанных.Контрагент, ОбъектДанных.Организация);  //первый попавшийся "СПокупателем"
	КонецЕсли;
	
	ОбъектДанных.КурсЗнаменатель = 1;
	
	ОбъектДанных.КурсЧислитель = 1;
	
	//гуид="";
	//ЕстьАтрибут = деф.Курьер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Курьер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Курьер.Ref ) );
	//Иначе
	//	ОбъектДанных.Курьер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Курьер = ксп_ИмпортСлужебный.НайтиКурьер(деф.Курьер);
	
	//гуид="";
	//ЕстьАтрибут = деф.Менеджер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Менеджер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Менеджер.Ref ) );
	//Иначе
	//	ОбъектДанных.Менеджер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Менеджер = ксп_ИмпортСлужебный.НайтиМенеджер(деф.Менеджер);
	
	//_знч = "";
	//ЕстьЗначение = деф.НалогообложениеНДС.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.НалогообложениеНДС = деф.НалогообложениеНДС.Значение;
	//Иначе
	ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	//КонецЕсли;
	
	ОбъектДанных.НаправлениеДеятельности = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка(
		"НаправлениеДеятельностиДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);
	
	//гуид="";
	//ЕстьАтрибут = деф.ОбъектРасчетовУпр.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ОбъектРасчетовУпр = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ОбъектРасчетовУпр.Ref ) );
	//Иначе
	//	ОбъектДанных.ОбъектРасчетовУпр = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ОбъектРасчетовУпр = ксп_ИмпортСлужебный.НайтиОбъектРасчетовУпр(деф.ОбъектРасчетовУпр);
	
	ОбъектДанных.ОплатаВВалюте = деф.ОплатаВВалюте;
	ОбъектДанных.Основание = деф.Основание;
	ОбъектДанных.ОснованиеДата = деф.ОснованиеДата;
	ОбъектДанных.ОснованиеНомер = деф.ОснованиеНомер;
	ОбъектДанных.ОсобыеУсловияПеревозки = деф.ОсобыеУсловияПеревозки;
	ОбъектДанных.ОсобыеУсловияПеревозкиОписание = деф.ОсобыеУсловияПеревозкиОписание;
	
	//гуид="";
	//ЕстьАтрибут = деф.Отпустил.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Отпустил = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Отпустил.Ref ) );
	//Иначе
	//	ОбъектДанных.Отпустил = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Отпустил = ксп_ИмпортСлужебный.НайтиОтпустил(деф.Отпустил);
	
	//ОбъектДанных.ОтпустилДолжность = деф.ОтпустилДолжность;
	
	Если ЗначениеЗаполнено(ОбъектДанных.Контрагент) Тогда
		ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;
	Иначе 
		ОбъектДанных.Партнер = Неопределено;
	КонецЕсли;
	
	ОбъектДанных.ПорядокРасчетов = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка(
		"ПорядокРасчетовДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);
	
	ОбъектДанных.СкидкиРассчитаны = Истина;
	
	//СпрСклад = ПолучитьСсылкуСправочникаПоДаннымID(деф.Склад, "Склады");
	СпрСклад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);
	ОбъектДанных.Склад = СпрСклад;
	
	ОбъектДанных.Согласован = Истина;
	
	//гуид="";
	//ЕстьАтрибут = деф.Соглашение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Соглашение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Соглашение.Ref ) );
	//Иначе
	//	ОбъектДанных.Соглашение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Соглашение = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка(
		"СоглашениеСКлиентамиДляРеализацияТоваровУслугИзУТ", мВнешняяСистема);
	
	_знч = "";
	ЕстьЗначение = деф.СостояниеЗаполненияМногооборотнойТары.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = деф.СостояниеЗаполненияМногооборотнойТары.Значение;
	Иначе
		ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = Неопределено;
	КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = ксп_ИмпортСлужебный.НайтиПеречисление_СостояниеЗаполненияМногооборотнойТары(деф.СостояниеЗаполненияМногооборотнойТары);
	
	_знч = "";
	ЕстьЗначение = деф.СпособДоставки.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СпособДоставки = деф.СпособДоставки.Значение;
	Иначе
		ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	
	//_знч = "";
	//ЕстьЗначение = деф.Статус.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.Статус = деф.Статус.Значение;
	//Иначе
	//	ОбъектДанных.Статус = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	
	ОбъектДанных.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	ОбъектДанных.СуммаВзаиморасчетов = деф.СуммаДокумента;
	ОбъектДанных.СуммаВзаиморасчетовПоТаре = деф.СуммаВзаиморасчетовПоТаре;
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	ОбъектДанных.ТребуетсяЗалогЗаТару = деф.ТребуетсяЗалогЗаТару;
	
	//ОбъектДанных.УдалитьДатаРаспоряжения = деф.УдалитьДатаРаспоряжения;
	//ОбъектДанных.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС = деф.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС;
	
	//_знч = "";
	//ЕстьЗначение = деф.УдалитьПорядокОплаты.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.УдалитьПорядокОплаты = деф.УдалитьПорядокОплаты.Значение;
	//Иначе
	//	ОбъектДанных.УдалитьПорядокОплаты = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.УдалитьПорядокОплаты = ксп_ИмпортСлужебный.НайтиПеречисление_УдалитьПорядокОплаты(деф.УдалитьПорядокОплаты);
	
	_знч = "";
	ЕстьЗначение = деф.ФормаОплаты.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ФормаОплаты = деф.ФормаОплаты.Значение;
	Иначе
		ОбъектДанных.ФормаОплаты = Неопределено;
	КонецЕсли;
	
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;
	
	ОбъектДанных.IT_ТребуетсяПересчетКурса = Истина;
	
	Если деф.свойство("Подразделение") и деф.Подразделение.Свойство("Ref") Тогда
		
		ОбъектДанных.Подразделение = Справочники.СтруктураПредприятия.ПолучитьСсылку(
			Новый УникальныйИдентификатор(деф.Подразделение.Ref));
	
	КонецЕсли;
		
	////------------------------------------------------------     ТЧ Товары
	
	
	ОбъектДанных.Товары.Очистить();
	
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
		
		СтрокаТЧ.ЗаказКлиента = Неопределено;
		СтрокаТЧ.ИдентификаторСтроки = строка(Новый УникальныйИдентификатор);
		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;
		СтрокаТЧ.КодСтроки = стрк.КодСтроки;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;
		
		ТэгНоменклатуры = стрк.Номенклатура;
		
		//_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
		_Номенклатура = ПолучитьСсылкуСправочникаПоДаннымID(ТэгНоменклатуры, "Номенклатура");
		
		Если СобиратьНенайденнуюНоменклатуру И ТэгНоменклатуры.Свойство("ref") Тогда
			Если НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
				Если НеНайденнаяНоменклатураМассив.Найти(ТэгНоменклатуры.ref) = Неопределено Тогда
					НеНайденнаяНоменклатураМассив.Добавить(ТэгНоменклатуры.Ref);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = _Номенклатура;
		
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
		
		СтрокаТЧ.ПроцентАвтоматическойСкидки = стрк.ПроцентАвтоматическойСкидки;
		СтрокаТЧ.ПроцентРучнойСкидки = стрк.ПроцентРучнойСкидки;
		//СтрокаТЧ.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);
		СтрокаТЧ.Склад = СпрСклад;
		СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоСправочникуЕРП(стрк.СтавкаНДС);
		//СтавкаНДС = стрк.СтавкаНДС.ПеречислениеСтавкаНДС.Значение;//строка
		//ЗаписьЖурналаРегистрации("ИмпортИзЕРП", УровеньЖурналаРегистрации.Ошибка, ,,"СтавкаНДС = "+СтавкаНДС);
		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
		
		СтрокаТЧ.Сумма = стрк.Сумма;
		СтрокаТЧ.СуммаАвтоматическойСкидки = стрк.СуммаАвтоматическойСкидки;
		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
		СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;
		СтрокаТЧ.СуммаСНДС = стрк.СуммаСНДС;
		
		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;
		
		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);
		СтрокаТЧ.Цена = стрк.Цена;
		СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(СтрокаТЧ.Номенклатура, ОбъектДанных.Склад, СтрокаТЧ.Характеристика);
		
	КонецЦикла;
	
	
	////------------------------------------------------------     ТЧ СкидкиНаценки
	
	
	ОбъектДанных.СкидкиНаценки.Очистить();
	
	Для счТовары = 0 По деф.ТЧСкидкиНаценки.Количество()-1 Цикл
		
		стрк = деф.ТЧСкидкиНаценки[счТовары];
		СтрокаТЧ = ОбъектДанных.СкидкиНаценки.Добавить();
		
		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;
		
		//	СтрокаТЧ.НапомнитьПозже = стрк.НапомнитьПозже;
		
		СтрокаТЧ.СкидкаНаценка = ксп_ИмпортСлужебный.НайтиСкидкуНаценку(стрк.СкидкаНаценка, мВнешняяСистема);
		
		СтрокаТЧ.Сумма = стрк.Сумма;
		
	КонецЦикла;
	
	
	////------------------------------------------------------     ТЧ ЭтапыГрафикаОплаты
	
	
	ОбъектДанных.ЭтапыГрафикаОплаты.Очистить();
	
	Для счТовары = 0 По деф.ТЧЭтапыГрафикаОплаты.Количество()-1 Цикл
		
		стрк = деф.ТЧЭтапыГрафикаОплаты[счТовары];
		СтрокаТЧ = ОбъектДанных.ЭтапыГрафикаОплаты.Добавить();
		
		_знч = "";
		ЕстьЗначение = стрк.ВариантОплаты.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			Если стрк.ВариантОплаты.Значение = "АвансДоОбеспечения" Тогда
				СтрокаТЧ.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения;
				
			ИначеЕсли стрк.ВариантОплаты.Значение = "КредитПослеОтгрузки" Тогда
				СтрокаТЧ.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки;
				
			ИначеЕсли стрк.ВариантОплаты.Значение = "КредитСдвиг" Тогда
				СтрокаТЧ.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг;
				
			ИначеЕсли стрк.ВариантОплаты.Значение = "ПредоплатаДоОтгрузки" Тогда
				СтрокаТЧ.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки;
				
			КонецЕсли;
			
		Иначе
			СтрокаТЧ.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки;
		КонецЕсли;
		
		_знч = "";
		ЕстьЗначение = стрк.ВариантОтсчета.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			Если стрк.ВариантОтсчета.Значение = "ОтДатыОтгрузки" Тогда
				СтрокаТЧ.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки;
				
			ИначеЕсли стрк.ВариантОтсчета.Значение = "ОтДатыЗаказа" Тогда
				СтрокаТЧ.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа;
				
			ИначеЕсли стрк.ВариантОтсчета.Значение = "ОтДатыПереходаПраваСобственности" Тогда
				СтрокаТЧ.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыПереходаПраваСобственности;
				
			ИначеЕсли стрк.ВариантОтсчета.Значение = "ОтДатыСогласования" Тогда
				СтрокаТЧ.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыСогласования;
				
			ИначеЕсли стрк.ВариантОтсчета.Значение = "ДоДатыОтгрузки" Тогда
				СтрокаТЧ.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ДоДатыОтгрузки;
				
			КонецЕсли;
			
		Иначе
			СтрокаТЧ.ВариантОтсчета = Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки;
		КонецЕсли;
		
		СтрокаТЧ.ДатаПлатежа = XMLЗначение(Тип("Дата"), стрк.ДатаПлатежа);
		
		Если ТИпЗнч(стрк.Заказ) = Тип("Структура") Тогда
			Если стрк.Заказ.Свойство("Ref") Тогда
				ИД = Новый УникальныйИдентификатор(стрк.Заказ.Ref);
				СтрокаТЧ.Заказ = Документы.ЗаказКлиента.ПолучитьСсылку(ИД);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиСоздатьОбъектРасчетовСКлиентом(ОбъектДанных, ОбъектДанных.Организация);
		СтрокаТЧ.ПроцентЗалогаЗаТару = стрк.ПроцентЗалогаЗаТару;
		СтрокаТЧ.ПроцентПлатежа = стрк.ПроцентПлатежа;
		СтрокаТЧ.СверхЗаказа = стрк.СверхЗаказа;
		СтрокаТЧ.Сдвиг = стрк.Сдвиг;
		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;
		СтрокаТЧ.СуммаВзаиморасчетовПоТаре = стрк.СуммаВзаиморасчетовПоТаре;
		СтрокаТЧ.СуммаЗалогаЗаТару = стрк.СуммаЗалогаЗаТару;
		СтрокаТЧ.СуммаПлатежа = стрк.СуммаПлатежа;
		
	КонецЦикла;
	
КонецФункции


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export
	
	
	мЧтениеJSON = Новый ЧтениеJSON;
	
	
	мЧтениеJSON.УстановитьСтроку(Json);
	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("Организация");
	мРеквизиты.Добавить("Контрагент");
	мРеквизиты.Добавить("Партнер");
	мРеквизиты.Добавить("Соглашение");
	//мРеквизиты.Добавить("Договор"); // не нужен, потому что соглашение ведется без договоров
	
	Возврат мРеквизиты;
	
КонецФункции

// Используется в  ксп_ИмпортСлужебный.ПроверитьКачествоДанных()
//
// Параметры:
//  ДокументОбъект  - ДокументСсылка - <описание параметра>
//
// Возвращаемое значение:
//  ТЗ, Колонки:
//   * ИмяТЧ
//   * ИмяКолонки
//
Функция ТабличныеЧастиДляПроверки(ДокументСсылка = Неопределено) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТЧ");
	ТЗ.Колонки.Добавить("ИмяКолонки");
	
	НовСтр = ТЗ.Добавить();
	НовСтр.ИмяТЧ = "Товары";
	НовСтр.ИмяКолонки = "Номенклатура";
	НовСтр = ТЗ.Добавить();
	НовСтр.ИмяТЧ = "Товары";
	НовСтр.ИмяКолонки = "Характеристика";
	
	Возврат ТЗ;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуСправочника(ГУИД, ВидОбъекта)
	
	СуществующийОбъект = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Справочники[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		
		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуСправочникаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Справочники[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)
	
	СуществующийОбъект = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		
		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуДокументаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Документы[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Документы[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Документы[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиДоговорРеализации(Контрагент, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
	
	
	ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
	
	Запрос.УстановитьПараметр("ТипДоговора", ТипДоговора);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Договор;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиСоздатьОбъектРасчетов(ДокСсылка) Экспорт
	
	
	
	Возврат Неопределено;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф) Экспорт
	
	
	Если НЕ ЭтоНовый Тогда	
		
		Если СуществующийДокСсылка.ПометкаУдаления Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;		
			
		ИначеЕсли НЕ СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		ИначеЕсли СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // новый документ
		
		Если деф.DeletionMark = Истина Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли НЕ деф.isPosted Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли деф.isPosted Тогда
			Возврат СОЗДАТЬ;
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат НЕ_ЗАГРУЖАТЬ;
	
КонецФункции

// Описание_метода
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции


мВнешняяСистема = "erp";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_ЕРП";

СобиратьНенайденнуюНоменклатуру = Истина;
НеНайденнаяНоменклатураМассив = Новый Массив;

СобиратьНенайденныхКонтрагентов = Истина;
НеНайденныеКонтрагентыМассив = Новый Массив;


НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;


