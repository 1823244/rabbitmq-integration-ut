Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;

Перем мЛоггер;
Перем мИдВызова;

Перем мВнешняяСистема;
Перем ИмяСобытияЖР;

Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем НеНайденнаяНоменклатураМассив;

Перем СобиратьНенайденныхКонтрагентов Экспорт;
Перем НеНайденныеКонтрагентыМассив;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.6");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПриобретениеТоваровУслуг");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПриобретениеТоваровУслуг");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПриобретениеТоваровУслуг",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПриобретениеТоваровУслуг",
		ТипКоманды, 
		Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
	//           ** Использование - Строка - тип команды:
	//               "ВызовКлиентскогоМетода",
	//               "ВызовСерверногоМетода",
	//               "ЗаполнениеФормы",
	//               "ОткрытиеФормы" или
	//               "СценарийВБезопасномРежиме".
	//               Для получения типов команд рекомендуется использовать функции
	//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
	//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.
	
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
	
КонецПроцедуры

#КонецОбласти


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	//мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из УТ: Приобретение товаров услуг");
	
	Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			//мЛоггер.ерр("Неверный тип входящего объекта. сообщение пропущено.");
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ПриобретениеТоваровУслуг") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		
		Рез = СоздатьОбновитьДокумент(СтруктураОбъекта);
		
		Попытка
			ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовНоменклатуры(НеНайденнаяНоменклатураМассив);
			Сообщить("Выполнен экспорт ненайденной номенклатуры - " + Строка(НеНайденнаяНоменклатураМассив.Количество()) + " позиций");
		Исключение
			т = "Ошибка экспорта ненайденной номенклатуры в УПП. Подробности: " + ОписаниеОшибки();
			Сообщить(т);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,,т);
			//мЛоггер.ерр(т);
		КонецПопытки;
		
		Попытка
			ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовКонтрагентов(НеНайденныеКонтрагентыМассив);
			Сообщить("Выполнен экспорт ненайденных контрагентов - " + Строка(НеНайденныеКонтрагентыМассив.Количество()) + " позиций");
		Исключение
			т = "Ошибка экспорта ненайденных контрагентов в УПП. Подробности: "+ОписаниеОшибки();
			Сообщить(т);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,,т);
			//мЛоггер.ерр(т);
		КонецПопытки;
		
		Возврат Рез;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,
		"Импорт из УТ. Плагин: Импорт Документ.ПриобретениеТоваровУслуг. Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;// для помещения в retry
		
	КонецПопытки;
КонецФункции

Функция СоздатьОбновитьДокумент(СтруктураОбъекта) Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;   
	
	ПустойДокумент = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка();
	
	ДокументИзУТ = "ПриобретениеТоваровУслуг (УТ) № " + деф.Number + " от " + строка(деф.Date);
	
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы.ПриобретениеТоваровУслуг.ПолучитьСсылку(УИД);
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки документа для " + ДокументИзУТ+ ". Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка
		
		Действие = ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		 ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,"Действие= "+строка(Действие));
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
			СсылкаНового = Документы.ПриобретениеТоваровУслуг.ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			//ОбъектДанных.УстановитьНовыйНомер();
		Иначе 
			ОтменитьТранзакцию();
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных);
		
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
		
		//РегистрыСведений.ксп_СоответствиеДокументовУстановкаПорядковыхНомеров.ДобавитьЗапись(ОбъектДанных.Ссылка, деф.Number, id.ref);
		
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
		ЗафиксироватьТранзакцию();
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Информация,,,"Записан Документ : "+строка(ОбъектДанных)+". Исходный док. УТ "+строка(ДокументИзУТ));
		
		Рез = ОбъектДанных.ССылка;
		
	Исключение
		
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
		"Объект не загружен! Ошибка в процессе загрузки документа " + ДокументИзУТ + ". Подробности: " + т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение; //отправляем в retry-очередь
		
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных, jsonText = "") Экспорт
	
	ЗаполнитьРеквизитыШапки(СтруктураОбъекта, ОбъектДанных, jsonText);
	ЗаполнитьРеквизитыТЧ_Товары(СтруктураОбъекта, ОбъектДанных, jsonText);
	ЗаполнитьРеквизитыТЧ_ЭтапыГрафикаОплаты(СтруктураОбъекта, ОбъектДанных, jsonText);
		
КонецФункции

Функция ЗаполнитьРеквизитыШапки(СтруктураОбъекта, ОбъектДанных, jsonText = "")
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;

	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.Номер = деф.Номер;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Валюта = ксп_ИмпортСлужебный. НайтиВалютуИзУзла(деф.Валюта);
	ОбъектДанных.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалютуИзУзла(деф.ВалютаВзаиморасчетов);
	ОбъектДанных.ВариантПриемкиТоваров = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ВариантыПриемкиТоваров", деф.ВариантПриемкиТоваров.Значение);
	ОбъектДанных.ВернутьМногооборотнуюТару = деф.ВернутьМногооборотнуюТару;
	ОбъектДанных.ВремяДоставкиПо = деф.ВремяДоставкиПо;
	ОбъектДанных.ВремяДоставкиС = деф.ВремяДоставкиС;
	
	Если ЗначениеЗаполнено(деф.ДатаВходящегоДокумента) Тогда
		Если ТипЗнч(деф.ДатаВходящегоДокумента) = Тип("Строка") Тогда
			ОбъектДанных.ДатаВходящегоДокумента = XMLЗначение(Тип("Дата"), деф.ДатаВходящегоДокумента);
		Иначе
			ОбъектДанных.ДатаВходящегоДокумента = деф.ДатаВходящегоДокумента;
		КонецЕсли; 
	КонецЕсли; 
	
	ОбъектДанных.ДатаПоступления = деф.ДатаПоступления;
	ОбъектДанных.Договор = ксп_ИмпортСлужебный.НайтиДоговор(деф.Договор, деф.Контрагент);
	ОбъектДанных.ЗакупкаПодДеятельность = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыНалогообложенияНДС", деф.ЗакупкаПодДеятельность.Значение);
	ОбъектДанных.Комментарий = деф.Комментарий;
	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	ОбъектДанных.КорректировкаОстатковРНПТ = деф.КорректировкаОстатковРНПТ;
	ОбъектДанных.КурсЗнаменатель = деф.КурсЗнаменатель;
	ОбъектДанных.КурсЧислитель = деф.КурсЧислитель;
	ОбъектДанных.НалогообложениеНДС = деф.НалогообложениеНДС.Значение;
	ОбъектДанных.НалогообложениеНДС = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыНалогообложенияНДС", деф.НалогообложениеНДС.Значение);
	ОбъектДанных.НомерВходящегоДокумента = деф.НомерВходящегоДокумента;
	ОбъектДанных.ОплатаВВалюте = деф.ОплатаВВалюте;
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.ОсобыеУсловияПеревозки = деф.ОсобыеУсловияПеревозки;
	ОбъектДанных.ОсобыеУсловияПеревозкиОписание = деф.ОсобыеУсловияПеревозкиОписание;
	ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;
	ОбъектДанных.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение, мВнешняяСистема);
	ОбъектДанных.ПорядокРасчетов = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ПорядокРасчетов", деф.ПорядокРасчетов.Значение);
	ОбъектДанных.ПоступлениеПоЗаказам = деф.ПоступлениеПоЗаказам;
	ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);
	ОбъектДанных.Согласован = деф.Согласован;
	ОбъектДанных.СпособДоставки  = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("СпособыДоставки", деф.СпособДоставки.Значение);
	ОбъектДанных.СуммаВзаиморасчетов = деф.СуммаВзаиморасчетов;
	ОбъектДанных.СуммаВзаиморасчетовПоЗаказу = деф.СуммаВзаиморасчетовПоЗаказу;
	ОбъектДанных.СуммаВзаиморасчетовПоТаре = деф.СуммаВзаиморасчетовПоТаре;
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	ОбъектДанных.ТребуетсяЗалогЗаТару = деф.ТребуетсяЗалогЗаТару;
	ОбъектДанных.ХозяйственнаяОперация = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ХозяйственныеОперации", деф.ХозяйственнаяОперация.Значение);
	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;



КонецФункции // ЗаполнитьРеквизитыШапки()
 
Функция ЗаполнитьРеквизитыТЧ_Товары(СтруктураОбъекта, ОбъектДанных, jsonText = "")

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;



	//------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();


		//гуид="";
		//ЕстьАтрибут = стрк.АналитикаУчетаНоменклатуры.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.АналитикаУчетаНоменклатуры = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНоменклатуры.Ref ) );
		//Иначе
		//	СтрокаТЧ.АналитикаУчетаНоменклатуры = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);

		//гуид="";
		//ЕстьАтрибут = стрк.ВидЗапасов.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.ВидЗапасов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЗапасов.Ref ) );
		//Иначе
		//	СтрокаТЧ.ВидЗапасов = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.ВидЗапасов = ксп_ИмпортСлужебный.НайтиВидЗапасов(стрк.ВидЗапасов);

		СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;
		СтрокаТЧ.КодСтроки = стрк.КодСтроки;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;
		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;
		СтрокаТЧ.НаименованиеВходящегоДокумента = стрк.НаименованиеВходящегоДокумента;
		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		СтрокаТЧ.НомерВходящегоДокумента = стрк.НомерВходящегоДокумента;
		СтрокаТЧ.НомерПаспорта = стрк.НомерПаспорта;
		СтрокаТЧ.ОбъектРасчетов = ОбъектДанных.Договор;
		СтрокаТЧ.ПроцентРучнойСкидки = стрк.ПроцентРучнойСкидки;
		СтрокаТЧ.Склад = ОБъектДанных.Склад;
		СтрокаТЧ.СписатьНаРасходы = стрк.СписатьНаРасходы;
		СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоСправочникуЕРП(стрк.СтавкаНДС);
		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
		СтрокаТЧ.Сумма = стрк.Сумма;
		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;
		//СтрокаТЧ.СуммаИтог = стрк.СуммаИтог;
		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
		СтрокаТЧ.СуммаНДСВзаиморасчетов = стрк.СуммаНДСВзаиморасчетов;
		СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;
		СтрокаТЧ.СуммаСНДС = стрк.СуммаСНДС;
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
		СтрокаТЧ.Цена = стрк.Цена;

	КонецЦикла;

КонецФункции

Функция ЗаполнитьРеквизитыТЧ_ЭтапыГрафикаОплаты(СтруктураОбъекта, ОбъектДанных, jsonText = "")

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	////------------------------------------------------------     ТЧ ЭтапыГрафикаОплаты



	ОбъектДанных.ЭтапыГрафикаОплаты.Очистить();


	Для счТовары = 0 По деф.ТЧЭтапыГрафикаОплаты.Количество()-1 Цикл
		стрк = деф.ТЧЭтапыГрафикаОплаты[счТовары];
		СтрокаТЧ = ОбъектДанных.ЭтапыГрафикаОплаты.Добавить();

//НомерСтроки	
//Заказ - 		ок
//СверхЗаказа	-  ок
//ВариантОплаты	 - ОК
//ДатаПлатежа	 - ОК
//Сдвиг	
//ПроцентПлатежа	
//СуммаПлатежа	
//ПроцентЗалогаЗаТару	
//СуммаЗалогаЗаТару	
//СуммаВзаиморасчетов	
//СуммаВзаиморасчетовПоТаре	
//ОбъектРасчетов	
//ВариантОтсчета - ОК

		СтрокаТЧ.Заказ = Неопределено;
		СтрокаТЧ.СверхЗаказа = Ложь;

		Если стрк.ВариантОплаты.Свойство("Значение") Тогда
			СтрокаТЧ.ВариантОплаты = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ВариантыКонтроляОплатыПоставщику", стрк.ВариантОплаты.Значение);
		КонецЕсли; 

		Если ЗначениеЗаполнено(стрк.ДатаПлатежа) Тогда
			Если ТипЗнч(стрк.ДатаПлатежа) = Тип("Строка") Тогда
				СтрокаТЧ.ДатаПлатежа = XMLЗначение(Тип("Дата"), стрк.ДатаПлатежа);
			Иначе
				СтрокаТЧ.ДатаПлатежа = стрк.ДатаПлатежа;
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаТЧ.Сдвиг = стрк.Сдвиг;
		СтрокаТЧ.ПроцентПлатежа = стрк.ПроцентПлатежа;
		СтрокаТЧ.СуммаПлатежа = стрк.СуммаПлатежа;
		СтрокаТЧ.ПроцентЗалогаЗаТару = стрк.ПроцентЗалогаЗаТару;
		СтрокаТЧ.СуммаЗалогаЗаТару = стрк.СуммаЗалогаЗаТару;
		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;
		СтрокаТЧ.СуммаВзаиморасчетовПоТаре = стрк.СуммаВзаиморасчетовПоТаре;

		//СтрокаТЧ.ОбъектРасчетов = ОбъектДанных.Договор;//заполлняется при проведении
		
		Если стрк.ВариантОтсчета.Свойство("Значение") Тогда
			СтрокаТЧ.ВариантОтсчета = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ВариантыОтсчетаДатыПлатежа", стрк.ВариантОтсчета.Значение);
		КонецЕсли; 
		

	КонецЦикла;

КонецФункции 

Функция ЗаполнитьРеквизитыТЧ2(СтруктураОбъекта, ОбъектДанных, jsonText = "")

	//id = СтруктураОбъекта.identification;
	//деф = СтруктураОбъекта.definition;


	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты



	//ОбъектДанных.ДополнительныеРеквизиты.Очистить();


	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);

	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ РасшифровкаПлатежа



	//ОбъектДанных.РасшифровкаПлатежа.Очистить();


	//Для счТовары = 0 По деф.ТЧРасшифровкаПлатежа.Количество()-1 Цикл
	//	стрк = деф.ТЧРасшифровкаПлатежа[счТовары];
	//	СтрокаТЧ = ОбъектДанных.РасшифровкаПлатежа.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.ВалютаВзаиморасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВалютаВзаиморасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВалютаВзаиморасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВалютаВзаиморасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалютаВзаиморасчетов(стрк.ВалютаВзаиморасчетов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ОбъектРасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ОбъектРасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиОбъектРасчетов(стрк.ОбъектРасчетов);

	//	СтрокаТЧ.Сумма = стрк.Сумма;

	//	СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ Серии



	//ОбъектДанных.Серии.Очистить();


	//Для счТовары = 0 По деф.ТЧСерии.Количество()-1 Цикл
	//	стрк = деф.ТЧСерии[счТовары];
	//	СтрокаТЧ = ОбъектДанных.Серии.Добавить();


	//	СтрокаТЧ.Количество = стрк.Количество;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Назначение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Номенклатура = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Склад.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Склад = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Склад.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Склад = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Склад = ксп_ИмпортСлужебный.НайтиСклад(стрк.Склад);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Характеристика = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ВидыЗапасов



	//ОбъектДанных.ВидыЗапасов.Очистить();


	//Для счТовары = 0 По деф.ТЧВидыЗапасов.Количество()-1 Цикл
	//	стрк = деф.ТЧВидыЗапасов[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ВидыЗапасов.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаРасходов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаРасходов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаРасходов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаРасходов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаРасходов = ксп_ИмпортСлужебный.НайтиАналитикаРасходов(стрк.АналитикаРасходов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаУчетаНоменклатуры.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНоменклатуры.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ВидЗапасов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВидЗапасов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЗапасов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВидЗапасов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВидЗапасов = ксп_ИмпортСлужебный.НайтиВидЗапасов(стрк.ВидЗапасов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ВидЗапасовПолучателя.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВидЗапасовПолучателя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЗапасовПолучателя.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВидЗапасовПолучателя = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВидЗапасовПолучателя = ксп_ИмпортСлужебный.НайтиВидЗапасовПолучателя(стрк.ВидЗапасовПолучателя);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ЗаказПоставщику.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ЗаказПоставщику = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЗаказПоставщику.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ЗаказПоставщику = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЗаказПоставщику = ксп_ИмпортСлужебный.НайтиЗаказПоставщику(стрк.ЗаказПоставщику);

	//	СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

	//	СтрокаТЧ.Количество = стрк.Количество;

	//	СтрокаТЧ.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;

	//	гуид="";
	//	ЕстьАтрибут = стрк.НомерГТД.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НомерГТД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НомерГТД.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НомерГТД = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НомерГТД = ксп_ИмпортСлужебный.НайтиНомерГТД(стрк.НомерГТД);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ОбъектРасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ОбъектРасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиОбъектРасчетов(стрк.ОбъектРасчетов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Подразделение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Подразделение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Подразделение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(стрк.Подразделение);

	//	СтрокаТЧ.СписатьНаРасходы = стрк.СписатьНаРасходы;

	//	гуид="";
	//	ЕстьАтрибут = стрк.СтавкаНДС.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.СтавкаНДС = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СтавкаНДС.Ref ) );
	//	Иначе
	//		СтрокаТЧ.СтавкаНДС = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.НайтиСтавкаНДС(стрк.СтавкаНДС);

	//	гуид="";
	//	ЕстьАтрибут = стрк.СтатьяРасходов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.СтатьяРасходов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СтатьяРасходов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.СтатьяРасходов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.СтатьяРасходов = ксп_ИмпортСлужебный.НайтиСтатьяРасходов(стрк.СтатьяРасходов);

	//	СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

	//	СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

	//	СтрокаТЧ.СуммаНДСВзаиморасчетов = стрк.СуммаНДСВзаиморасчетов;

	//	СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;

	//	СтрокаТЧ.СуммаСНДС = стрк.СуммаСНДС;

	//	СтрокаТЧ.Цена = стрк.Цена;

	//КонецЦикла;


	////------------------------------------------------------     ТЧ ШтрихкодыУпаковок



	//ОбъектДанных.ШтрихкодыУпаковок.Очистить();


	//Для счТовары = 0 По деф.ТЧШтрихкодыУпаковок.Количество()-1 Цикл
	//	стрк = деф.ТЧШтрихкодыУпаковок[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ШтрихкодыУпаковок.Добавить();


	//	СтрокаТЧ.ЗначениеШтрихкода = стрк.ЗначениеШтрихкода;

	//	гуид="";
	//	ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);

	//КонецЦикла;






КонецФункции 








#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export
	
	
	мЧтениеJSON = Новый ЧтениеJSON;
	
	
	мЧтениеJSON.УстановитьСтроку(Json);
	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("Организация");
	мРеквизиты.Добавить("Контрагент");
	мРеквизиты.Добавить("Партнер");
	мРеквизиты.Добавить("Соглашение");
	//мРеквизиты.Добавить("Договор"); // не нужен, потому что соглашение ведется без договоров
	
	Возврат мРеквизиты;
	
КонецФункции

// Используется в  ксп_ИмпортСлужебный.ПроверитьКачествоДанных()
//
// Параметры:
//  ДокументОбъект  - ДокументСсылка - <описание параметра>
//
// Возвращаемое значение:
//  ТЗ, Колонки:
//   * ИмяТЧ
//   * ИмяКолонки
//
Функция ТабличныеЧастиДляПроверки(ДокументСсылка = Неопределено) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТЧ");
	ТЗ.Колонки.Добавить("ИмяКолонки");
	
	НовСтр = ТЗ.Добавить();
	НовСтр.ИмяТЧ = "Товары";
	НовСтр.ИмяКолонки = "Номенклатура";
	НовСтр = ТЗ.Добавить();
	НовСтр.ИмяТЧ = "Товары";
	НовСтр.ИмяКолонки = "Характеристика";
	
	Возврат ТЗ;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиДоговорРеализации(Контрагент, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
	
	
	ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
	
	Запрос.УстановитьПараметр("ТипДоговора", ТипДоговора);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Договор;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиСоздатьОбъектРасчетов(ДокСсылка) Экспорт
	
	
	
	Возврат Неопределено;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф) Экспорт
	
	
	Если НЕ ЭтоНовый Тогда	
		
		Если СуществующийДокСсылка.ПометкаУдаления Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;		
			
		ИначеЕсли НЕ СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		ИначеЕсли СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // новый документ
		
		Если деф.DeletionMark = Истина Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли НЕ деф.isPosted Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли деф.isPosted Тогда
			Возврат СОЗДАТЬ;
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат НЕ_ЗАГРУЖАТЬ;
	
КонецФункции

// Описание_метода
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции


мВнешняяСистема = "erp";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_ЕРП";

СобиратьНенайденнуюНоменклатуру = Истина;
НеНайденнаяНоменклатураМассив = Новый Массив;

СобиратьНенайденныхКонтрагентов = Истина;
НеНайденныеКонтрагентыМассив = Новый Массив;


НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;


