Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;

Перем мВнешняяСистема;
Перем ИмяСобытияЖР;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.15");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПередачаТоваровМеждуОрганизациями");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПередачаТоваровМеждуОрганизациями");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПередачаТоваровМеждуОрганизациями",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПередачаТоваровМеждуОрганизациями",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
    Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			Возврат Неопределено;
		КонецЕсли;
	
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ПередачаТоваровМеждуОрганизациями") Тогда
			Возврат Неопределено;
		КонецЕсли;

		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;

		Рез = СоздатьОбновитьДокумент(СтруктураОбъекта);   	
     
		
		Возврат Рез;
		
    Исключение
        ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,
		"Импорт из ЕРП. Плагин: Импорт Документ.ПередачаТоваровМеждуОрганизациями. Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;// для помещения в retry
	КонецПопытки;	
			
КонецФункции

Функция СоздатьОбновитьДокумент(СтруктураОбъекта) Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;   
	
	ПустойДокумент = Документы.ПриобретениеТоваровУслуг.ПустаяСсылка();
	
	ДокументИзЕРП = "ПередачаТоваровМеждуОрганизациями (ЕРП) № " + деф.Number + " от " + строка(деф.Date);
		
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы.ПриобретениеТоваровУслуг.ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки документа для " + ДокументИзЕРП+ ". Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
			СсылкаНового = Документы.ПриобретениеТоваровУслуг.ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		Иначе 
			ОтменитьТранзакцию();
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных);		

		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.ОбменДанными.Загрузка = Истина;
			ОбъектДанных.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
		
		//РегистрыСведений.ксп_СоответствиеДокументовУстановкаПорядковыхНомеров.ДобавитьЗапись(ОбъектДанных.Ссылка, деф.Number, id.ref);
		
        jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		

		ЗафиксироватьТранзакцию();
		
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Информация,,,"Записан Документ : "+строка(ОбъектДанных)+". Исходный док. УТ "+строка(ДокументИзЕРП));
		
		Рез = ОбъектДанных.ССылка;
		
	
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа " + ДокументИзЕРП + ". Подробности: " + т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение; //отправляем в retry-очередь
	КонецПопытки;	
	
	Возврат Рез;
	
КонецФункции


// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	СкладГУИД = "";
	Если деф.Склад.Свойство("Ref", СкладГУИД) Тогда
		_Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СкладГУИД));
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(_Склад) 
		ИЛИ (ТипЗнч(_Склад) = Тип("СправочникСсылка.Склады") И НЕ ЗначениеЗаполнено(_Склад.ВерсияДанных)) Тогда
		//https://wiki.elis.ru/pages/viewpage.action?pageId=362170
		_Склад = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("Склад_ПередачаТоваровМеждуОрг", мВнешняяСистема);
	КонецЕсли;
	
	ОбъектДанных.Склад = _Склад;
	
	ОбъектДанных.Валюта = Справочники.Валюты.НайтиПоКоду(
		деф.Валюта.currencyCode);
	
	ОбъектДанных.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(
		деф.ВалютаВзаиморасчетов.currencyCode);
	
	ОбъектДанных.Комментарий = "[ЕРП №"+деф.Number+" От "+деф.Date+"]"+". Оригинальный коммент.: "+деф.Комментарий;
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.ОрганизацияПолучатель, мВнешняяСистема);
	
	//ОбъектДанных.Грузоотправитель = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Грузоотправитель, мВнешняяСистема);
	
	//https://wiki.elis.ru/pages/viewpage.action?pageId=362170
	ОбъектДанных.Контрагент = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("Контрагент_ПередачаТоваровМеждуОрг", мВнешняяСистема);
	ОбъектДанных.Договор = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("Договор_ПередачаТоваровМеждуОрг", мВнешняяСистема);
	
	ОбъектДанных.Партнер = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("Партнер_ПередачаТоваровМеждуОрг", мВнешняяСистема);
	ОбъектДанных.Соглашение = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("Соглашение_ПередачаТоваровМеждуОрг", мВнешняяСистема);
	
	
	ОбъектДанных.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение, мВнешняяСистема);
	
	ОбъектДанных.СуммаВзаиморасчетов = деф.СуммаВзаиморасчетов;
	
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	
	ОбъектДанных.НомерВходящегоДокумента = деф.НомерВходящегоДокумента;
	
	ОбъектДанных.ДатаВходящегоДокумента = деф.ДатаВходящегоДокумента;
	
	ОбъектДанных.ГруппаФинансовогоУчета = ксп_ИмпортСлужебный.НайтиГруппуФинансовогоУчета(деф.ГруппаФинансовогоУчета, мВнешняяСистема);
	
	ОбъектДанных.КурсЧислитель = деф.КурсЧислитель;
	
	ОбъектДанных.КурсЗнаменатель = деф.КурсЗнаменатель;
		
	ОбъектДанных.НаименованиеВходящегоДокумента = деф.НаименованиеВходящегоДокумента;

	
	НаправлениеДеятельностиГУИД = ""; 
	Если деф.НаправлениеДеятельности.Свойство("Ref", НаправлениеДеятельностиГУИД) Тогда
		ОбъектДанных.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПолучитьСсылку(Новый УникальныйИдентификатор(НаправлениеДеятельностиГУИД));
	КонецЕсли;

	ОбъектДанных.ОплатаВВалюте = деф.ОплатаВВалюте;
	
	ОбъектДанных.АдресДоставки = деф.АдресДоставки;
		
	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;  
	
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	
	ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	
	ОбъектДанных.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	
	ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	
	ОбъектДанных.Согласован = Истина;
	
	ОбъектДанных.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	ОбъектДанных.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
		
	//---------------------------------------------ТЧ ТОВАРЫ
	
	ОбъектДанных.Товары.Очистить();

	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		НовСтр = ОбъектДанных.Товары.Добавить();
		
			
		НовСтр.Количество = стрк.Количество;
		НовСтр.КоличествоУпаковок = стрк.КоличествоУпаковок;
		
		
		НовСтр.ИдентификаторСтроки = стрк.ИдентификаторСтроки;
		
		НовСтр.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);		
		
		НовСтр.СтавкаНДС = НовСтр.Номенклатура.СтавкаНДС;//ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоСправочникуЕРП(стрк.СтавкаНДС);
		
		НовСтр.СуммаНДС = стрк.СуммаНДС;
		НовСтр.Сумма = стрк.Сумма;
		НовСтр.СуммаСНДС = стрк.СуммаСНДС;
		
		
		НовСтр.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
	
		НовСтр.Цена = стрк.Цена;
		
		НовСтр.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;
		
		НовСтр.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;
		
		НовСтр.СуммаНДСВзаиморасчетов = стрк.СуммаНДСВзаиморасчетов;
		
		НовСтр.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
		
		НовСтр.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(стрк.Подразделение, мВнешняяСистема);
		
		//НовСтр.АналитикаУчетаНомеклатуры = ксп_ИмпортСлужебный.НайтиАналитикуУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры, мВнешняяСистема);
		
		НовСтр.СписатьНаРасходы = стрк.СписатьНаРасходы;
		
		НовСтр.Склад = ОбъектДанных.Склад;
		
		НовСтр.ОбъектРасчетов = НайтиСоздатьОбъектРасчетовСПоставщикомПоДоговору(ОбъектДанных.Договор, ОбъектДанных.Организация);
		
		
		
		Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);
		//упаковка может быть не указана в строке ТЧ, тогда используем единицу хранения номенклатуры
		Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
			Упаковка = НовСтр.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		НовСтр.Упаковка = Упаковка;
		
	КонецЦикла;


КонецФункции


Функция НайтиСоздатьОбъектРасчетовСПоставщикомПоДоговору(Договор, Организация) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ                                              
		|	ОбъектыРасчетов.Объект = &ДОговорСсылка
		|	И ОбъектыРасчетов.ТипРасчетов = &ТипРасчетов
		|	И ОбъектыРасчетов.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДОговорСсылка", Договор);
	Запрос.УстановитьПараметр("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Рез = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Рез = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	//
	//Если НЕ ЗначениеЗаполнено(Рез) Тогда
	//	
	//	РезОбк = Справочники.ОбъектыРасчетов.СоздатьЭлемент();
	//	РезОбк.Организация = Организация;
	//	РезОбк.Объект = ДокументРасчетовОбъект.Ссылка;
	//	РезОбк.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	//	РезОбк.ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.ПлатежВозврат;
	//	РезОбк.состояние = 0;
	//	
	//	Если ДокументРасчетовОбъект.Проведен Тогда
	//		РезОбк.состояние = 1;
	//	КонецЕсли;
	//	Если ДокументРасчетовОбъект.ПометкаУдаления Тогда
	//		РезОбк.состояние = 2;
	//	КонецЕсли;
	//	
	//	РезОбк.Записать();
	//	
	//	Рез = РезОбк.Ссылка;
	//	
	//КонецЕсли;

	Возврат Рез;
	
КонецФункции








#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф) Экспорт
	
	
	Если НЕ ЭтоНовый Тогда	
		
		Если СуществующийДокСсылка.ПометкаУдаления Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;		
			
		ИначеЕсли НЕ СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		ИначеЕсли СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;

		КонецЕсли;
		
	Иначе // новый документ
		
		Если деф.DeletionMark = Истина Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли НЕ деф.isPosted Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли деф.isPosted Тогда
			Возврат СОЗДАТЬ;
		КонецЕсли;		

	КонецЕсли;
		
	Возврат НЕ_ЗАГРУЖАТЬ;
	
КонецФункции



мВнешняяСистема = "erp";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_ЕРП";


НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;



