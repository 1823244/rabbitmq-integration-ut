
Перем мЛоггер;
Перем мИдВызова;
Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.01");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
	"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Справочник_ДоговорыКонтрагентов",
	"Форма_Плагин_RabbitMQ_импорт_из_УПП_Справочник_ДоговорыКонтрагентов",
	ТипКоманды, 
	Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
	//           ** Использование - Строка - тип команды:
	//               "ВызовКлиентскогоМетода",
	//               "ВызовСерверногоМетода",
	//               "ЗаполнениеФормы",
	//               "ОткрытиеФормы" или
	//               "СценарийВБезопасномРежиме".
	//               Для получения типов команд рекомендуется использовать функции
	//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
	//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.
	
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
	
КонецПроцедуры

#КонецОбласти


// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта) Экспорт
	
	//мЛоггер = Вычислить("мис_ЛоггерСервер.getLogger(мИдВызова, ""Импорт из УПП: справочник Договоры контрагентов"")");
	
	Попытка
		
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Справочник.ДоговорыКонтрагентов") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		def = СтруктураОбъекта.definition;
		
		Если def.isFolder = Истина Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СуществующийОбъект = ПолучитьСсылкуСправочникаПоДаннымID(id, "ДоговорыКонтрагентов");
		
		Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
			ОбъектДанных = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			СсылкаНового = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		Иначе 
			ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		КонецЕсли;
		
		ОбъектДанных.ПометкаУдаления = def.DeletionMark;
		
		ОбъектДанных.Наименование = def.Наименование;
		
		ОбъектДанных.БанковскийСчет = ПолучитьСсылкуСправочникаПоДаннымID(def.БанковскийСчет, "БанковскиеСчетаОрганизаций");
		ОбъектДанных.БанковскийСчетКонтрагента = ПолучитьСсылкуСправочникаПоДаннымID(def.БанковскийСчетКонтрагента, "БанковскиеСчетаКонтрагентов");
		
		ОбъектДанных.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(def.ВалютаВзаиморасчетов.currencyCode);
		ОбъектДанных.Комментарий = def.Комментарий;
		
		ОбъектДанных.ДатаНачалаДействия = def.Date;
		ОбъектДанных.ДатаОкончанияДействия = def.Период;
		ОбъектДанных.Организация = ПолучитьСсылкуСправочникаПоДаннымID(def.Организация, "Организации");
		ОбъектДанных.Контрагент = ПолучитьСсылкуСправочникаПоДаннымID(def.Контрагент, "Контрагенты");
		
		//ОбъектДанных.Менеджер
		//ОбъектДанных.НаименованиеДляПечати
		
		ОбъектДанных.УчетАгентскогоНДС = def.УчетАгентскогоНДС;
		
		//ОбъектДанных.ВидАгентскогоДоговора
		
		ОбъектДанных.Дата = def.Дата;
		ОбъектДанных.Номер = def.Номер;
		ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;
		ОбъектДанных.Подразделение = ПолучитьСсылкуСправочникаПоДаннымID(def.Подразделение, "СтруктураПредприятия");
		
		НайденноеЗначение = "";
		Если def.ПорядокРасчетов.Свойство("Значение", НайденноеЗначение) Тогда
			ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов[НайденноеЗначение];
		КонецЕсли;
		
		ОбъектДанных.Согласован = def.Согласован;
		
		НайденноеЗначение = "";
		Если def.Статус.Свойство("Значение", НайденноеЗначение) Тогда
			ОбъектДанных.Статус = Перечисления.СтатусыДоговоровКонтрагентов[НайденноеЗначение];
		КонецЕсли;
		
		НайденноеЗначение = "";
		Если def.ХозяйственнаяОперация.Свойство("Значение", НайденноеЗначение) Тогда
			ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации[НайденноеЗначение];
		КонецЕсли;
		
		НайденноеЗначение = "";
		Если def.ВидДоговора.Свойство("Значение", НайденноеЗначение) Тогда
			ОбъектДанных.ТипДоговора = Перечисления.ТипыДоговоров[НайденноеЗначение];
		КонецЕсли;
		
		//ОбъектДанных.ОграничиватьСуммуЗадолженности
		//ОбъектДанных.ДопустимаяСуммаЗадолженности
		//ОбъектДанных.ГруппаФинансовогоУчета
		//ОбъектДанных.ЗапрещаетсяПросроченнаяЗадолженность
		//ОбъектДанных.ПереоцениватьТоварыУслугиКОтчетуКомитенту
		//ОбъектДанных.КонтактноеЛицо
		//ОбъектДанных.СтатьяДвиженияДенежныхСредств
		//ОбъектДанных.ИдентификаторПлатежа
		//ОбъектДанных.УстановленСрокОплаты
		//ОбъектДанных.СрокОплаты
		//ОбъектДанных.Сумма
		
		//ОбъектДанных.ЗаданГрафикИсполнения
		//ОбъектДанных.ДоговорСУчастникомГОЗ
		//ОбъектДанных.ГосударственныйКонтракт
		//ОбъектДанных.ПлатежиПо275ФЗ
		//ОбъектДанных.ТипПлатежаФЗ275
		//ОбъектДанных.ИностранныйИсполнительВУтвержденномПеречнеГОЗ
		//ОбъектДанных.ГрафикИсполненияДоговора
		//ОбъектДанных.СуммаПрибыли
		//ОбъектДанных.СуммаПредоплатыДоОтгрузки
		//ОбъектДанных.НаправлениеДеятельности
		
		ПеречислениеСтавкаНДС = "";
		Если def.СтавкаНДС.Свойство("ПеречислениеСтавкаНДС", ПеречислениеСтавкаНДС) Тогда
			НайденноеЗначение = "";
			Если ПеречислениеСтавкаНДС.Свойство("Значение", НайденноеЗначение) Тогда
				ОбъектДанных.НалогообложениеНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("ПеречислениеСтавкаНДС", Перечисления.СтавкиНДС[НайденноеЗначение] );
			КонецЕсли;
		КонецЕсли;
		
		//ОбъектДанных.ВариантОформленияЗакупок
		//ОбъектДанных.ОплатаРасходовПоТарифамСГосрегулированием
		
		НайденноеЗначение = "";
		Если def.НалогообложениеНДС.Свойство("Значение", НайденноеЗначение) Тогда
			ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС[НайденноеЗначение];
		КонецЕсли;
		
		//ОбъектДанных.ЗакупкаПодДеятельность
		//ОбъектДанных.НалогообложениеНДСОпределяетсяВДокументе
		//ОбъектДанных.ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение
		//ОбъектДанных.ПорядокОформленияСписанияВПроизводствоТоваровПринятыхНаХранение
		//ОбъектДанных.УникальныйНомерВалютногоКонтроля
		//ОбъектДанных.ЗакупкаПодДеятельностьОпределяетсяВДокументе
		//ОбъектДанных.КодРаздел7ДекларацииНДС
		//ОбъектДанных.Назначение
		
		//ОбъектДанных.ВыполненыОбязательстваПоДоговоруГОЗ
		//ОбъектДанных.ВариантПриемкиТоваров
		//ОбъектДанных.ИдентификаторГосКонтракта
		//ОбъектДанных.СпособДоставки
		//ОбъектДанных.ПеревозчикПартнер
		//ОбъектДанных.ЗонаДоставки
		//ОбъектДанных.ВремяДоставкиС
		//ОбъектДанных.ВремяДоставкиПо
		//ОбъектДанных.АдресДоставки
		//ОбъектДанных.АдресДоставкиЗначенияПолей
		//ОбъектДанных.ДополнительнаяИнформацияПоДоставке
		//ОбъектДанных.АдресДоставкиПеревозчика
		//ОбъектДанных.АдресДоставкиПеревозчикаЗначенияПолей
		//ОбъектДанных.АдресДоставкиДляПоставщика
		//ОбъектДанных.ОплатаВВалюте
		//ОбъектДанных.ОбъектРасчетов
		//ОбъектДанных.ЦентрализованныйДоговор
		//ОбъектДанных.РазрешаетсяПередачаОплатМеждуФилиалами
		//ОбъектДанных.АдресДоставкиЗначение
		//ОбъектДанных.АдресДоставкиПеревозчикаЗначение
		//ОбъектДанных.КомиссионныеПродажи25
		//ОбъектДанных.ВестиРасчетыЧерезКонечныхПокупателей
		
		ОбъектДанных.ВидЦенУчетный = ксп_ИмпортСлужебный.НайтиВидЦены(def.ВидЦенУчетный, мВнешняяСистема);
		ОбъектДанных.ВидЦенПродажи = ОбъектДанных.ВидЦенУчетный;
		
		//КомиссионерПартнер
		//КомиссионерКонтрагент
		//ДоговорСКомиссионером
		//ГруппаФинансовогоУчетаКлиента
		//РазрешенаРаботаСДочернимиПартнерами
		//СтавкаДисконтирования
		//СрокДляПримененияДисконтирования
		//ВариантВыбытияМаркируемойПродукции
		//ВариантКурсаДоговора
		//РазбиватьОтчетПоДокументам
		//ПорядокОтраженияНеотфактурованныхПоставокНУ

		//ТЧДоговорыСЗаказчиками: [],
		//ТЧПодтверждающиеДокументы: [],
		//ТЧДополнительныеРеквизиты: [],
		//ТЧФилиалы: []
		
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		
		ОбъектДанных.Записать();
		
		Возврат ОбъектДанных.Ссылка;
		
	Исключение
		
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//мЛоггер.ерр("Плагин импорта договоров контрагентов УПП. Подробности: " + т);
		
		//    ОБЯЗАТЕЛЬНО!!! Потому что в оркестраторе вызов плагина в попытке. и если была ошибка, надо сделать BasicReject()
		ВызватьИсключение т;
		
	КонецПопытки;
	
КонецФункции


Функция ПолучитьСсылкуСправочникаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Справочники[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export
	
	
	мЧтениеJSON = Новый ЧтениеJSON;
	
	
	мЧтениеJSON.УстановитьСтроку(Json);
	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	//Если Свойство = "Сумма" Тогда
	//	Возврат XMLЗначение(Тип("Число"),Значение);
	//КонецЕсли;
	//Если Свойство = "Валюта" Тогда
	//	Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	//КонецЕсли;
	
КонецФункции

#КонецОбласти


Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервереИзМассиваАдресов(МассивАдресов, Обновлять = Истина) Экспорт
	
	мОбновлять = Обновлять;
	//млоггер = мис_логгерСервер.getLogger(мИдВызова);
	
	//млоггер.инфо("НАЧАЛИ пакет из "+строка(МассивАдресов.Количество())+" файлов");
	
	сч_обраотано = 0;
	сч_ошибок = 0;
	
	Для каждого Адрес Из МассивАдресов Цикл
		
		ДвоичныеДанные  = ПолучитьИзВременногоХранилища(Адрес);
		Если 1=0 Тогда
			ДвоичныеДанные = новый ДвоичныеДанные("");
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("json");
		ДвоичныеДанные.Записать(ИмяФайла);
		
		мЧтениеJSON = Новый ЧтениеJSON;
		мЧтениеJSON.ОткрытьФайл(ИмяФайла);
		
		Попытка
			СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
		Исключение
			т = ОписаниеОшибки();
			Если СтрНайти(т, "Непредвиденный символ при чтении JSON") > 0 Тогда
				тт = новый ТекстовыйДокумент; 
				тт.Прочитать(ИмяФайла);
				
				//мЛоггер.ерр(т+". Сообщение с ошибкой: "+тт.ПолучитьТекст());
				Продолжить;
			КонецЕсли;
		КонецПопытки;
		
		Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
			Для Каждого эл из СтруктураОбъекта Цикл
				
				Попытка
					ЗагрузитьОбъект(эл);
					сч_обраотано = сч_обраотано +1;
				Исключение
					//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					сч_ошибок = сч_ошибок + 1;
				КонецПопытки;
				
			КонецЦикла;
		Иначе 
			
			Попытка
				ЗагрузитьОбъект(СтруктураОбъекта);
				сч_обраотано = сч_обраотано +1;
			Исключение
				//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				сч_ошибок = сч_ошибок + 1;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//млоггер.инфо("ЗАВЕРШИЛИ пакет из "+строка(МассивАдресов.Количество())+" файлов. УСпешно обработано = "+строка(сч_обраотано)
	//+", ошибок = "+Строка(сч_ошибок));
	
	Возврат Неопределено;
	
КонецФункции


мВнешняяСистема = "ut";

