
// передает все обработки с клиента на сервер   "*.epf"
&НаКлиенте
Процедура ЗагрузитьОбработки(Команда)
	
	ДопПараметры = Новый Структура("СсылкаНаРодитель");
	НайтиИОбработатьФайлы(ПутьККаталогу, ДопПараметры);
	
	ПоказатьПредупреждение(,"Загрузка завершена!");
		
КонецПроцедуры

&НаКлиенте
Функция НайтиИОбработатьФайлы(Путь, ДопПараметры)
	
	Файлы = НайтиФайлы(Путь,"*");
	
	Для каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда                                                                                                                                                  
			
			СтруктураГруппы = Новый Структура;
			СтруктураГруппы.Вставить("ИмяГруппы", Файл.Имя);
			
			СсылкаНаРодитель = СоздатьГруппуСправочника(Файл.Имя, Файл.ПолноеИмя);
			ДопПараметры.СсылкаНаРодитель = СсылкаНаРодитель;
			НайтиИОбработатьФайлы(Файл.ПолноеИмя, ДопПараметры);
		Иначе
			ОбработкаФайла(Файл, ДопПараметры.СсылкаНаРодитель);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции 

Функция СоздатьГруппуСправочника(ИмяГруппы, ПолноеИмя)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		сообщить("имя родителя - пусто!");
		возврат Неопределено;
	КонецЕсли;
	НайденаяГруппа = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяГруппы, Истина);
	
	Если ЗначениеЗаполнено(НайденаяГруппа) Тогда
		Возврат НайденаяГруппа;		
	КонецЕсли; 
	
	МассивСтроки = СтрРазделить(ПолноеИмя,"\"); 
	СсылкаНаРодитель = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(МассивСтроки[МассивСтроки.Количество()-2]); 
	
	Группа = Справочники.ДополнительныеОтчетыИОбработки.СоздатьГруппу();
	Группа.Наименование = ИмяГруппы;
	
	Если ЗначениеЗаполнено(СсылкаНаРодитель) Тогда
		Группа.Родитель = СсылкаНаРодитель;	
	КонецЕсли;
	
	Группа.Записать();
	Возврат Группа.Ссылка; 
	
КонецФункции

&НаКлиенте
Процедура ОбработкаФайла(Файл, СсылкаНаГруппу) 
	
		МассивОписаниеПередаваемогоФайла = Новый Массив;
		
		м = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя);
		МассивОписаниеПередаваемогоФайла.Добавить(м);
		
		ДопПараметры = Новый Структура("Путь, Имя, ИмяБезРасширения, СсылкаНаГруппу", Файл.ПолноеИмя, Файл.Имя, Файл.ИмяБезРасширения, СсылкаНаГруппу);
		ЗавершениеПомещенияФайлаНаСервер = Новый ОписаниеОповещения("ЗавершениеПомещенияФайлаНаСервер", ЭтотОбъект, ДопПараметры);
		НачатьПомещениеФайлаНаСервер(ЗавершениеПомещенияФайлаНаСервер,,,,Файл.ПолноеИмя,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

// Это колбэк. Вызывает метод, загружающий обработку в базу
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
&НаКлиенте
Процедура ЗавершениеПомещенияФайлаНаСервер(ПомещенныйФайл, ДопПараметры) Экспорт
	
	АдресФайлаНаСервере = ПомещенныйФайл.Адрес;
	
	Если ПомещенныйФайл.ПомещениеФайлаОтменено Тогда
		ВызватьИсключение "Не удалось поместить на сервер этот файл: "+ДопПараметры.Путь;
	КонецЕсли;
	
	ЗагрузитьОбработкуНаСервере(АдресФайлаНаСервере, ДопПараметры.Имя, ДопПараметры.ИмяБезРасширения, ДопПараметры.СсылкаНаГруппу);
	
КонецПроцедуры


// Создает/Обновляет обработку в базе в спр Доп. обработок.
//
// Параметры:
//	АдресФайлаНаСервере 	- строка - адрес во врем хране. e1cib/tempstorage/8741482e-3a95-4642-a7af-10d74b423c91?seanceId=MjliNTQxZWEtYWRiNS00YTNjLTk0MGQtNDgxZDIzNWE0NmI0S0n4op6rv0CmFOKuE_8pmQAAAAA
//	Имя - строка - имя файла, без пути
//	ИмяБезРасширения - строка - имя файла без расширения
//
&НаСервере
Процедура ЗагрузитьОбработкуНаСервере(АдресФайлаНаСервере, Имя, ИмяБезРасширения, СсылкаНаГруппу)
		
	ЗаписьЖурналаРегистрации("МенеджерДопОбработок",УровеньЖурналаРегистрации.Информация,,,"имя: "+Имя+" адрес: "+АдресФайлаНаСервере);
	//Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("И
		
	обрСсылка = НайтиОбработкуПоИмениФайла(Имя, СсылкаНаГруппу);
	
	Если ЗначениеЗаполнено(обрСсылка) Тогда
		ОбновитьОбработку(обрСсылка, АдресФайлаНаСервере, Имя, ИмяБезРасширения, СсылкаНаГруппу);
	Иначе 
		СоздатьОбработку(АдресФайлаНаСервере, Имя, ИмяБезРасширения, СсылкаНаГруппу);
	КонецЕсли;
	
КонецПроцедуры
		

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ОбновитьОбработку(обрСсылка, АдресФайлаНаСервере, Имя, ИмяБезРасширения, СсылкаНаГруппу)

	ИмяОбъекта = ВнешниеОбработки.Подключить(АдресФайлаНаСервере, , Истина,
		ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
		
	ВнешнийОбъект = ВнешниеОбработки.Создать(ИмяОбъекта);	
	
	СведенияОВнешнейОбработке = ВнешнийОбъект.СведенияОВнешнейОбработке();
	
	обрОбк = обрСсылка.ПолучитьОбъект();
	
	ОбновитьРеквизиты(ОбрОбк, СведенияОВнешнейОбработке, АдресФайлаНаСервере, Имя, ИмяБезРасширения);
	
	Если Флаг Тогда 
		обрОбк.Родитель = СсылкаНаГруппу;	
	Иначе 
		обрОбк.Родитель = ГруппаОбработок;
	КонецЕсли;
	
    обрОбк.Записать();
	
КонецПроцедуры

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ОбновитьРеквизиты(ОбрОбк, СведенияОВнешнейОбработке, АдресФайлаНаСервере, Имя, ИмяБезРасширения)

	ЗаполнитьЗначенияСвойств(обрОбк, СведенияОВнешнейОбработке);
	
	Если СведенияОВнешнейОбработке.Вид = "ДополнительнаяОбработка" Тогда
		обрОбк.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	Иначе 
		обрОбк.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	КонецЕсли;
	
	обрОбк.ИмяОбъекта = ИмяБезРасширения;
	обрОбк.ИмяФайла = Имя;
	обрОбк.ИспользоватьДляФормыОбъекта = Ложь;
	обрОбк.ИспользоватьДляФормыСписка = Ложь;
	обрОбк.Комментарий = "";
	обрОбк.Ответственный = Пользователи.ТекущийПользователь();
	обрОбк.Публикация = перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	обрОбк.ХранилищеНастроек = Неопределено;
	обрОбк.ИспользуетХранилищеВариантов = Ложь;
	обрОбк.ТеснаяИнтеграцияСФормойОтчета = Ложь;
	обрОбк.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2;
	
	ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресФайлаНаСервере);
	
	обрОбк.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки, Новый СжатиеДанных(9));
	
	
	// КОМАНДЫ
	
	
	
	//обрОбк.Команды.Очистить();

	
	СведенияОВнешнейОбработке.Команды.Колонки.Добавить("ВариантЗапуска");
	
	Для Каждого КомандаОписание Из СведенияОВнешнейОбработке.Команды Цикл
		КомандаОписание.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок[КомандаОписание.Использование];
	КонецЦикла;

	
	// Инициализация команд
	Для Каждого КомандаОписание Из СведенияОВнешнейОбработке.Команды Цикл
		
		Если НЕ ЗначениеЗаполнено(КомандаОписание.ВариантЗапуска) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для команды ""%1"" не определен способ запуска.'"), КомандаОписание.Представление));
		КонецЕсли;
		
		Команда = обрОбк.Команды.Найти(КомандаОписание.Идентификатор,"Идентификатор");
		Если Команда = Неопределено Тогда
			Команда = обрОбк.Команды.Добавить();
		КонецЕсли;
			
		
		ЗаполнитьЗначенияСвойств(Команда, КомандаОписание);
		
	КонецЦикла;
		
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьОбработку(АдресФайлаНаСервере, Имя, ИмяБезРасширения, СсылкаНаГруппу)
		

	Менеджер = ВнешниеОбработки;              
	ИмяОбъекта = Менеджер.Подключить(АдресФайлаНаСервере, , Истина,
		ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений());
	ВнешнийОбъект = Менеджер.Создать(ИмяОбъекта);	
	
	СведенияОВнешнейОбработке = ВнешнийОбъект.СведенияОВнешнейОбработке();
	
	обрОбк = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
	
	ЗаполнитьРеквизиты(ОбрОбк, СведенияОВнешнейОбработке, АдресФайлаНаСервере, Имя, ИмяБезРасширения);
	
	Если Флаг Тогда 
		обрОбк.Родитель = СсылкаНаГруппу;	
	Иначе 
		обрОбк.Родитель = ГруппаОбработок;
	КонецЕсли;
	
	
    обрОбк.Записать();
		

	Возврат обрОбк.Ссылка;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаполнитьРеквизиты(ОбрОбк, СведенияОВнешнейОбработке, АдресФайлаНаСервере, Имя, ИмяБезРасширения)

	//ЗаполнитьЗначенияСвойств(обрОбк, СведенияОВнешнейОбработке, "Наименование, БезопасныйРежим, Версия, Информация");		
	ЗаполнитьЗначенияСвойств(обрОбк, СведенияОВнешнейОбработке);
	
	Если СведенияОВнешнейОбработке.Вид = "ДополнительнаяОбработка" Тогда
		обрОбк.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	Иначе 
		обрОбк.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	КонецЕсли;
	
	обрОбк.ИмяОбъекта = ИмяБезРасширения;
	обрОбк.ИмяФайла = Имя;
	обрОбк.ИспользоватьДляФормыОбъекта = Ложь;
	обрОбк.ИспользоватьДляФормыСписка = Ложь;
	обрОбк.Комментарий = "";
	обрОбк.Ответственный = Пользователи.ТекущийПользователь();
	обрОбк.Публикация = перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	обрОбк.ХранилищеНастроек = Неопределено;
	обрОбк.ИспользуетХранилищеВариантов = Ложь;
	обрОбк.ТеснаяИнтеграцияСФормойОтчета = Ложь;
	обрОбк.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2;
	
	ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресФайлаНаСервере);
	
	обрОбк.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки, Новый СжатиеДанных(9));
	
	
	// КОМАНДЫ
	
	обрОбк.Команды.Очистить();

	
	СведенияОВнешнейОбработке.Команды.Колонки.Добавить("ВариантЗапуска");
	
	Для Каждого КомандаОписание Из СведенияОВнешнейОбработке.Команды Цикл
		КомандаОписание.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок[КомандаОписание.Использование];
	КонецЦикла;

	
	// Инициализация команд
	Для Каждого КомандаОписание Из СведенияОВнешнейОбработке.Команды Цикл
		
		Если НЕ ЗначениеЗаполнено(КомандаОписание.ВариантЗапуска) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для команды ""%1"" не определен способ запуска.'"), КомандаОписание.Представление));
		КонецЕсли;
		Команда = обрОбк.Команды.Добавить();
		ЗаполнитьЗначенияСвойств(Команда, КомандаОписание);
		
	КонецЦикла;
	
	
		
КонецФункции


// Ищет обработку в базе по имени файла
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиОбработкуПоИмениФайла(ИмяФайлаКороткое, СсылкаНаГруппу)
	
	Если Флаг Тогда 
		Родитель = СсылкаНаГруппу;	
	Иначе 
		Родитель = ГруппаОбработок;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.ИмяФайла = &ИмяФайла
		|	И ДополнительныеОтчетыИОбработки.Родитель = &ГруппаОбработок";
	
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайлаКороткое);
	Запрос.УстановитьПараметр("ГруппаОбработок", Родитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

 

&НаКлиенте
Процедура ПутьККаталогуНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог";
	Диалог.ПолноеИмяФайла = ""; 
	Диалог.МножественныйВыбор = Ложь;	
	ДопПараметры = Неопределено;
	Диалог.Показать(Новый ОписаниеОповещения("ПутьККаталогуНачалоВыбораЗавершение", ЭтаФорма, ДопПараметры));		
	
	
	
КонецПроцедуры


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
&НаКлиенте
Процедура ПутьККаталогуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// каталог лежит в первом элементе (это строка)
	Для каждого эл Из ВыбранныеФайлы Цикл
		ПутьККаталогу = эл;
		прервать;
	КонецЦикла;
	
КонецПроцедуры



&НаСервере
Процедура ВыгрузитьОбработкиНаСервере(Адрес, Группа)
	
	МассивСтруктур = Новый Массив;
	Структура = Новый Структура("ИмяФайла,ДвоичныеДанные");
	
	Запрос = Новый Запрос("Выбрать Спрк.Ссылка, спрк.ИмяФайла, спрк.ХранилищеОбработки 
	|из Справочник.ДополнительныеОтчетыИОбработки как Спрк 
	|где Спрк.Ссылка в иерархии (&Группа) и спрк.этогруппа = ложь");
	Запрос.УстановитьПараметр("Группа", Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("ИмяФайла,ДвоичныеДанные",Выборка.ИмяФайла, Выборка.ХранилищеОбработки.Получить());
		МассивСтруктур.Добавить(Структура);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МассивСтруктур, Адрес);
	
КонецПроцедуры 

&НаСервере
Процедура ВыгрузитьВсеОбработкиНаСервере(Адрес) 

	МассивСтруктур = Новый Массив; 
	МассивОбработок = Новый Массив; 
	ДанныеОбработки = Новый Структура("ИмяФайла,ДвоичныеДанные");
	СтруктураГруп = Новый Структура("ИмяГрупы,МассивОбработок");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВсеОбработки
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.ЭтоГруппа = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеОбработки.Ссылка КАК Ссылка1,
		|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка,
		|	ДополнительныеОтчетыИОбработки.ИмяФайла КАК ИмяФайла,
		|	ДополнительныеОтчетыИОбработки.ХранилищеОбработки КАК ХранилищеОбработки
		|ИЗ
		|	ВсеОбработки КАК ВсеОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|		ПО ВсеОбработки.Ссылка = ДополнительныеОтчетыИОбработки.Родитель
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ
		|ИТОГИ ПО
		|	Ссылка1 ИЕРАРХИЯ";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаГруппы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГруппы.Следующий() Цикл
		
        МассивОбработок = Новый Массив;
		СтруктураГруп = Новый Структура("ИмяГрупы", ВыборкаГруппы.Ссылка1);
        СтруктураГруп.Вставить("УровеньВИерархии", ВыборкаГруппы.Уровень());
		
		Выборка = ВыборкаГруппы.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			Попытка 
				ДанныеОбработки = Новый Структура("ИмяФайла,ДвоичныеДанные",Выборка.ИмяФайла, Выборка.ХранилищеОбработки.Получить());
				МассивОбработок.Добавить(ДанныеОбработки);
			Исключение 
			КонецПопытки;
		КонецЦикла;
		
		СтруктураГруп.Вставить("МассивОбработок", МассивОбработок);
		МассивСтруктур.Добавить(СтруктураГруп);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МассивСтруктур, Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработки(Команда)
	
	Адрес = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	Если Флаг Тогда 
		
		ВыгрузитьВсеОбработкиНаСервере(Адрес);
		
		МассивСтруктур = ПолучитьИзВременногоХранилища(Адрес);
		Путь = ПутьККаталогуВыгрузки + "\ОбработкиИзСправочника";
		СоздатьКаталог(Путь);

		Для Каждого стрк Из МассивСтруктур Цикл
			
			Если стрк.УровеньВИерархии = 0 Тогда
				ПутьКОбработке = Путь +"\"+ стрк.ИмяГрупы;
				ПутьРодителя = ПутьКОбработке;
			Иначе
				МассивСтроки = СтрРазделить(ПутьРодителя,"\");
				ИмяГруппыРодителя = МассивСтроки[МассивСтроки.Количество()-1];
				
				Если ИмяГруппыРодителя = Строка(стрк.ИмяГрупы) Тогда 
					ПутьКОбработке = ПутьРодителя;	
				Иначе
					ПутьКОбработке = ПутьРодителя +"\"+ стрк.ИмяГрупы;	
				КонецЕсли
			КонецЕсли;
			
			СоздатьКаталог(ПутьКОбработке);
			
			Для Каждого Строка Из стрк.МассивОбработок Цикл 
				
				Строка.ДвоичныеДанные.Записать(ПутьКОбработке +"\"+ Строка.ИмяФайла);	
				
			КонецЦикла;
		КонецЦикла;
	Иначе 
		ВыгрузитьОбработкиНаСервере(Адрес, ГруппаОбработок);
	
		МассивСтруктурДвоичныхДанных = ПолучитьИзВременногоХранилища(Адрес); 

		Для каждого стрк Из МассивСтруктурДвоичныхДанных Цикл
			
			стрк.ДвоичныеДанные.Записать(ПутьККаталогуВыгрузки+"\"+стрк.ИмяФайла);
			
		КонецЦикла;
	КонецЕсли;
	
	ПоказатьПредупреждение(,"Выгрузка завершена");
	
КонецПроцедуры


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
&НаКлиенте
Процедура ПутьККаталогуВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	// каталог лежит в первом элементе (это строка)
	Для каждого эл Из ВыбранныеФайлы Цикл
		ПутьККаталогуВыгрузки = эл;
		прервать;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог для выгрузки обработок";
	Диалог.ПолноеИмяФайла = ""; 
	Диалог.МножественныйВыбор = Ложь;	
	ДопПараметры = Неопределено;
	Диалог.Показать(Новый ОписаниеОповещения("ПутьККаталогуВыгрузкиНачалоВыбораЗавершение", ЭтаФорма, ДопПараметры));		
	
КонецПроцедуры



